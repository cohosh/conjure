// Code generated by protoc-gen-go. DO NOT EDIT.
// source: signalling.proto

package proto

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	anypb "google.golang.org/protobuf/types/known/anypb"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type KeyType int32

const (
	KeyType_AES_GCM_128 KeyType = 90
	KeyType_AES_GCM_256 KeyType = 91
)

var KeyType_name = map[int32]string{
	90: "AES_GCM_128",
	91: "AES_GCM_256",
}

var KeyType_value = map[string]int32{
	"AES_GCM_128": 90,
	"AES_GCM_256": 91,
}

func (x KeyType) Enum() *KeyType {
	p := new(KeyType)
	*p = x
	return p
}

func (x KeyType) String() string {
	return proto.EnumName(KeyType_name, int32(x))
}

func (x *KeyType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(KeyType_value, data, "KeyType")
	if err != nil {
		return err
	}
	*x = KeyType(value)
	return nil
}

func (KeyType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_39f66308029891ad, []int{0}
}

type DnsRegMethod int32

const (
	DnsRegMethod_UDP DnsRegMethod = 1
	DnsRegMethod_DOT DnsRegMethod = 2
	DnsRegMethod_DOH DnsRegMethod = 3
)

var DnsRegMethod_name = map[int32]string{
	1: "UDP",
	2: "DOT",
	3: "DOH",
}

var DnsRegMethod_value = map[string]int32{
	"UDP": 1,
	"DOT": 2,
	"DOH": 3,
}

func (x DnsRegMethod) Enum() *DnsRegMethod {
	p := new(DnsRegMethod)
	*p = x
	return p
}

func (x DnsRegMethod) String() string {
	return proto.EnumName(DnsRegMethod_name, int32(x))
}

func (x *DnsRegMethod) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(DnsRegMethod_value, data, "DnsRegMethod")
	if err != nil {
		return err
	}
	*x = DnsRegMethod(value)
	return nil
}

func (DnsRegMethod) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_39f66308029891ad, []int{1}
}

// State transitions of the client
type C2S_Transition int32

const (
	C2S_Transition_C2S_NO_CHANGE                C2S_Transition = 0
	C2S_Transition_C2S_SESSION_INIT             C2S_Transition = 1
	C2S_Transition_C2S_SESSION_COVERT_INIT      C2S_Transition = 11
	C2S_Transition_C2S_EXPECT_RECONNECT         C2S_Transition = 2
	C2S_Transition_C2S_SESSION_CLOSE            C2S_Transition = 3
	C2S_Transition_C2S_YIELD_UPLOAD             C2S_Transition = 4
	C2S_Transition_C2S_ACQUIRE_UPLOAD           C2S_Transition = 5
	C2S_Transition_C2S_EXPECT_UPLOADONLY_RECONN C2S_Transition = 6
	C2S_Transition_C2S_ERROR                    C2S_Transition = 255
)

var C2S_Transition_name = map[int32]string{
	0:   "C2S_NO_CHANGE",
	1:   "C2S_SESSION_INIT",
	11:  "C2S_SESSION_COVERT_INIT",
	2:   "C2S_EXPECT_RECONNECT",
	3:   "C2S_SESSION_CLOSE",
	4:   "C2S_YIELD_UPLOAD",
	5:   "C2S_ACQUIRE_UPLOAD",
	6:   "C2S_EXPECT_UPLOADONLY_RECONN",
	255: "C2S_ERROR",
}

var C2S_Transition_value = map[string]int32{
	"C2S_NO_CHANGE":                0,
	"C2S_SESSION_INIT":             1,
	"C2S_SESSION_COVERT_INIT":      11,
	"C2S_EXPECT_RECONNECT":         2,
	"C2S_SESSION_CLOSE":            3,
	"C2S_YIELD_UPLOAD":             4,
	"C2S_ACQUIRE_UPLOAD":           5,
	"C2S_EXPECT_UPLOADONLY_RECONN": 6,
	"C2S_ERROR":                    255,
}

func (x C2S_Transition) Enum() *C2S_Transition {
	p := new(C2S_Transition)
	*p = x
	return p
}

func (x C2S_Transition) String() string {
	return proto.EnumName(C2S_Transition_name, int32(x))
}

func (x *C2S_Transition) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(C2S_Transition_value, data, "C2S_Transition")
	if err != nil {
		return err
	}
	*x = C2S_Transition(value)
	return nil
}

func (C2S_Transition) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_39f66308029891ad, []int{2}
}

// State transitions of the server
type S2C_Transition int32

const (
	S2C_Transition_S2C_NO_CHANGE           S2C_Transition = 0
	S2C_Transition_S2C_SESSION_INIT        S2C_Transition = 1
	S2C_Transition_S2C_SESSION_COVERT_INIT S2C_Transition = 11
	S2C_Transition_S2C_CONFIRM_RECONNECT   S2C_Transition = 2
	S2C_Transition_S2C_SESSION_CLOSE       S2C_Transition = 3
	// TODO should probably also allow EXPECT_RECONNECT here, for DittoTap
	S2C_Transition_S2C_ERROR S2C_Transition = 255
)

var S2C_Transition_name = map[int32]string{
	0:   "S2C_NO_CHANGE",
	1:   "S2C_SESSION_INIT",
	11:  "S2C_SESSION_COVERT_INIT",
	2:   "S2C_CONFIRM_RECONNECT",
	3:   "S2C_SESSION_CLOSE",
	255: "S2C_ERROR",
}

var S2C_Transition_value = map[string]int32{
	"S2C_NO_CHANGE":           0,
	"S2C_SESSION_INIT":        1,
	"S2C_SESSION_COVERT_INIT": 11,
	"S2C_CONFIRM_RECONNECT":   2,
	"S2C_SESSION_CLOSE":       3,
	"S2C_ERROR":               255,
}

func (x S2C_Transition) Enum() *S2C_Transition {
	p := new(S2C_Transition)
	*p = x
	return p
}

func (x S2C_Transition) String() string {
	return proto.EnumName(S2C_Transition_name, int32(x))
}

func (x *S2C_Transition) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(S2C_Transition_value, data, "S2C_Transition")
	if err != nil {
		return err
	}
	*x = S2C_Transition(value)
	return nil
}

func (S2C_Transition) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_39f66308029891ad, []int{3}
}

// Should accompany all S2C_ERROR messages.
type ErrorReasonS2C int32

const (
	ErrorReasonS2C_NO_ERROR         ErrorReasonS2C = 0
	ErrorReasonS2C_COVERT_STREAM    ErrorReasonS2C = 1
	ErrorReasonS2C_CLIENT_REPORTED  ErrorReasonS2C = 2
	ErrorReasonS2C_CLIENT_PROTOCOL  ErrorReasonS2C = 3
	ErrorReasonS2C_STATION_INTERNAL ErrorReasonS2C = 4
	ErrorReasonS2C_DECOY_OVERLOAD   ErrorReasonS2C = 5
	ErrorReasonS2C_CLIENT_STREAM    ErrorReasonS2C = 100
	ErrorReasonS2C_CLIENT_TIMEOUT   ErrorReasonS2C = 101
)

var ErrorReasonS2C_name = map[int32]string{
	0:   "NO_ERROR",
	1:   "COVERT_STREAM",
	2:   "CLIENT_REPORTED",
	3:   "CLIENT_PROTOCOL",
	4:   "STATION_INTERNAL",
	5:   "DECOY_OVERLOAD",
	100: "CLIENT_STREAM",
	101: "CLIENT_TIMEOUT",
}

var ErrorReasonS2C_value = map[string]int32{
	"NO_ERROR":         0,
	"COVERT_STREAM":    1,
	"CLIENT_REPORTED":  2,
	"CLIENT_PROTOCOL":  3,
	"STATION_INTERNAL": 4,
	"DECOY_OVERLOAD":   5,
	"CLIENT_STREAM":    100,
	"CLIENT_TIMEOUT":   101,
}

func (x ErrorReasonS2C) Enum() *ErrorReasonS2C {
	p := new(ErrorReasonS2C)
	*p = x
	return p
}

func (x ErrorReasonS2C) String() string {
	return proto.EnumName(ErrorReasonS2C_name, int32(x))
}

func (x *ErrorReasonS2C) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ErrorReasonS2C_value, data, "ErrorReasonS2C")
	if err != nil {
		return err
	}
	*x = ErrorReasonS2C(value)
	return nil
}

func (ErrorReasonS2C) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_39f66308029891ad, []int{4}
}

type TransportType int32

const (
	TransportType_Null   TransportType = 0
	TransportType_Min    TransportType = 1
	TransportType_Obfs4  TransportType = 2
	TransportType_DTLS   TransportType = 3
	TransportType_Prefix TransportType = 4
	TransportType_uTLS   TransportType = 5
	TransportType_Format TransportType = 6
	TransportType_WASM   TransportType = 7
	TransportType_FTE    TransportType = 8
	TransportType_Quic   TransportType = 9
	TransportType_Webrtc TransportType = 99
)

var TransportType_name = map[int32]string{
	0:  "Null",
	1:  "Min",
	2:  "Obfs4",
	3:  "DTLS",
	4:  "Prefix",
	5:  "uTLS",
	6:  "Format",
	7:  "WASM",
	8:  "FTE",
	9:  "Quic",
	99: "Webrtc",
}

var TransportType_value = map[string]int32{
	"Null":   0,
	"Min":    1,
	"Obfs4":  2,
	"DTLS":   3,
	"Prefix": 4,
	"uTLS":   5,
	"Format": 6,
	"WASM":   7,
	"FTE":    8,
	"Quic":   9,
	"Webrtc": 99,
}

func (x TransportType) Enum() *TransportType {
	p := new(TransportType)
	*p = x
	return p
}

func (x TransportType) String() string {
	return proto.EnumName(TransportType_name, int32(x))
}

func (x *TransportType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(TransportType_value, data, "TransportType")
	if err != nil {
		return err
	}
	*x = TransportType(value)
	return nil
}

func (TransportType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_39f66308029891ad, []int{5}
}

type RegistrationSource int32

const (
	RegistrationSource_Unspecified      RegistrationSource = 0
	RegistrationSource_Detector         RegistrationSource = 1
	RegistrationSource_API              RegistrationSource = 2
	RegistrationSource_DetectorPrescan  RegistrationSource = 3
	RegistrationSource_BidirectionalAPI RegistrationSource = 4
	RegistrationSource_DNS              RegistrationSource = 5
	RegistrationSource_BidirectionalDNS RegistrationSource = 6
	RegistrationSource_AMPCache         RegistrationSource = 7
	RegistrationSource_BidirectionalAMP RegistrationSource = 8
)

var RegistrationSource_name = map[int32]string{
	0: "Unspecified",
	1: "Detector",
	2: "API",
	3: "DetectorPrescan",
	4: "BidirectionalAPI",
	5: "DNS",
	6: "BidirectionalDNS",
	7: "AMPCache",
	8: "BidirectionalAMP",
}

var RegistrationSource_value = map[string]int32{
	"Unspecified":      0,
	"Detector":         1,
	"API":              2,
	"DetectorPrescan":  3,
	"BidirectionalAPI": 4,
	"DNS":              5,
	"BidirectionalDNS": 6,
	"AMPCache":         7,
	"BidirectionalAMP": 8,
}

func (x RegistrationSource) Enum() *RegistrationSource {
	p := new(RegistrationSource)
	*p = x
	return p
}

func (x RegistrationSource) String() string {
	return proto.EnumName(RegistrationSource_name, int32(x))
}

func (x *RegistrationSource) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(RegistrationSource_value, data, "RegistrationSource")
	if err != nil {
		return err
	}
	*x = RegistrationSource(value)
	return nil
}

func (RegistrationSource) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_39f66308029891ad, []int{6}
}

type StationOperations int32

const (
	StationOperations_Unknown StationOperations = 0
	StationOperations_New     StationOperations = 1
	StationOperations_Update  StationOperations = 2
	StationOperations_Clear   StationOperations = 3
)

var StationOperations_name = map[int32]string{
	0: "Unknown",
	1: "New",
	2: "Update",
	3: "Clear",
}

var StationOperations_value = map[string]int32{
	"Unknown": 0,
	"New":     1,
	"Update":  2,
	"Clear":   3,
}

func (x StationOperations) Enum() *StationOperations {
	p := new(StationOperations)
	*p = x
	return p
}

func (x StationOperations) String() string {
	return proto.EnumName(StationOperations_name, int32(x))
}

func (x *StationOperations) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(StationOperations_value, data, "StationOperations")
	if err != nil {
		return err
	}
	*x = StationOperations(value)
	return nil
}

func (StationOperations) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_39f66308029891ad, []int{7}
}

type IPProto int32

const (
	IPProto_Unk IPProto = 0
	IPProto_Tcp IPProto = 1
	IPProto_Udp IPProto = 2
)

var IPProto_name = map[int32]string{
	0: "Unk",
	1: "Tcp",
	2: "Udp",
}

var IPProto_value = map[string]int32{
	"Unk": 0,
	"Tcp": 1,
	"Udp": 2,
}

func (x IPProto) Enum() *IPProto {
	p := new(IPProto)
	*p = x
	return p
}

func (x IPProto) String() string {
	return proto.EnumName(IPProto_name, int32(x))
}

func (x *IPProto) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(IPProto_value, data, "IPProto")
	if err != nil {
		return err
	}
	*x = IPProto(value)
	return nil
}

func (IPProto) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_39f66308029891ad, []int{8}
}

type PubKey struct {
	// A public key, as used by the station.
	Key                  []byte   `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	Type                 *KeyType `protobuf:"varint,2,opt,name=type,enum=proto.KeyType" json:"type,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PubKey) Reset()         { *m = PubKey{} }
func (m *PubKey) String() string { return proto.CompactTextString(m) }
func (*PubKey) ProtoMessage()    {}
func (*PubKey) Descriptor() ([]byte, []int) {
	return fileDescriptor_39f66308029891ad, []int{0}
}

func (m *PubKey) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PubKey.Unmarshal(m, b)
}
func (m *PubKey) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PubKey.Marshal(b, m, deterministic)
}
func (m *PubKey) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PubKey.Merge(m, src)
}
func (m *PubKey) XXX_Size() int {
	return xxx_messageInfo_PubKey.Size(m)
}
func (m *PubKey) XXX_DiscardUnknown() {
	xxx_messageInfo_PubKey.DiscardUnknown(m)
}

var xxx_messageInfo_PubKey proto.InternalMessageInfo

func (m *PubKey) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *PubKey) GetType() KeyType {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return KeyType_AES_GCM_128
}

type TLSDecoySpec struct {
	// The hostname/SNI to use for this host
	//
	// The hostname is the only required field, although other
	// fields are expected to be present in most cases.
	Hostname *string `protobuf:"bytes,1,opt,name=hostname" json:"hostname,omitempty"`
	// The 32-bit ipv4 address, in network byte order
	//
	// If the IPv4 address is absent, then it may be resolved via
	// DNS by the client, or the client may discard this decoy spec
	// if local DNS is untrusted, or the service may be multihomed.
	Ipv4Addr *uint32 `protobuf:"fixed32,2,opt,name=ipv4addr" json:"ipv4addr,omitempty"`
	// The 128-bit ipv6 address, in network byte order
	Ipv6Addr []byte `protobuf:"bytes,6,opt,name=ipv6addr" json:"ipv6addr,omitempty"`
	// The Tapdance station public key to use when contacting this
	// decoy
	//
	// If omitted, the default station public key (if any) is used.
	Pubkey *PubKey `protobuf:"bytes,3,opt,name=pubkey" json:"pubkey,omitempty"`
	// The maximum duration, in milliseconds, to maintain an open
	// connection to this decoy (because the decoy may close the
	// connection itself after this length of time)
	//
	// If omitted, a default of 30,000 milliseconds is assumed.
	Timeout *uint32 `protobuf:"varint,4,opt,name=timeout" json:"timeout,omitempty"`
	// The maximum TCP window size to attempt to use for this decoy.
	//
	// If omitted, a default of 15360 is assumed.
	//
	// TODO: the default is based on the current heuristic of only
	// using decoys that permit windows of 15KB or larger.  If this
	// heuristic changes, then this default doesn't make sense.
	Tcpwin               *uint32  `protobuf:"varint,5,opt,name=tcpwin" json:"tcpwin,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TLSDecoySpec) Reset()         { *m = TLSDecoySpec{} }
func (m *TLSDecoySpec) String() string { return proto.CompactTextString(m) }
func (*TLSDecoySpec) ProtoMessage()    {}
func (*TLSDecoySpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_39f66308029891ad, []int{1}
}

func (m *TLSDecoySpec) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TLSDecoySpec.Unmarshal(m, b)
}
func (m *TLSDecoySpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TLSDecoySpec.Marshal(b, m, deterministic)
}
func (m *TLSDecoySpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLSDecoySpec.Merge(m, src)
}
func (m *TLSDecoySpec) XXX_Size() int {
	return xxx_messageInfo_TLSDecoySpec.Size(m)
}
func (m *TLSDecoySpec) XXX_DiscardUnknown() {
	xxx_messageInfo_TLSDecoySpec.DiscardUnknown(m)
}

var xxx_messageInfo_TLSDecoySpec proto.InternalMessageInfo

func (m *TLSDecoySpec) GetHostname() string {
	if m != nil && m.Hostname != nil {
		return *m.Hostname
	}
	return ""
}

func (m *TLSDecoySpec) GetIpv4Addr() uint32 {
	if m != nil && m.Ipv4Addr != nil {
		return *m.Ipv4Addr
	}
	return 0
}

func (m *TLSDecoySpec) GetIpv6Addr() []byte {
	if m != nil {
		return m.Ipv6Addr
	}
	return nil
}

func (m *TLSDecoySpec) GetPubkey() *PubKey {
	if m != nil {
		return m.Pubkey
	}
	return nil
}

func (m *TLSDecoySpec) GetTimeout() uint32 {
	if m != nil && m.Timeout != nil {
		return *m.Timeout
	}
	return 0
}

func (m *TLSDecoySpec) GetTcpwin() uint32 {
	if m != nil && m.Tcpwin != nil {
		return *m.Tcpwin
	}
	return 0
}

type ClientConf struct {
	DecoyList            *DecoyList          `protobuf:"bytes,1,opt,name=decoy_list,json=decoyList" json:"decoy_list,omitempty"`
	Generation           *uint32             `protobuf:"varint,2,opt,name=generation" json:"generation,omitempty"`
	DefaultPubkey        *PubKey             `protobuf:"bytes,3,opt,name=default_pubkey,json=defaultPubkey" json:"default_pubkey,omitempty"`
	PhantomSubnetsList   *PhantomSubnetsList `protobuf:"bytes,4,opt,name=phantom_subnets_list,json=phantomSubnetsList" json:"phantom_subnets_list,omitempty"`
	ConjurePubkey        *PubKey             `protobuf:"bytes,5,opt,name=conjure_pubkey,json=conjurePubkey" json:"conjure_pubkey,omitempty"`
	DnsRegConf           *DnsRegConf         `protobuf:"bytes,6,opt,name=dns_reg_conf,json=dnsRegConf" json:"dns_reg_conf,omitempty"`
	AmpCacheConf         *AMPCacheConf       `protobuf:"bytes,7,opt,name=amp_cache_conf,json=ampCacheConf" json:"amp_cache_conf,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *ClientConf) Reset()         { *m = ClientConf{} }
func (m *ClientConf) String() string { return proto.CompactTextString(m) }
func (*ClientConf) ProtoMessage()    {}
func (*ClientConf) Descriptor() ([]byte, []int) {
	return fileDescriptor_39f66308029891ad, []int{2}
}

func (m *ClientConf) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ClientConf.Unmarshal(m, b)
}
func (m *ClientConf) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ClientConf.Marshal(b, m, deterministic)
}
func (m *ClientConf) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClientConf.Merge(m, src)
}
func (m *ClientConf) XXX_Size() int {
	return xxx_messageInfo_ClientConf.Size(m)
}
func (m *ClientConf) XXX_DiscardUnknown() {
	xxx_messageInfo_ClientConf.DiscardUnknown(m)
}

var xxx_messageInfo_ClientConf proto.InternalMessageInfo

func (m *ClientConf) GetDecoyList() *DecoyList {
	if m != nil {
		return m.DecoyList
	}
	return nil
}

func (m *ClientConf) GetGeneration() uint32 {
	if m != nil && m.Generation != nil {
		return *m.Generation
	}
	return 0
}

func (m *ClientConf) GetDefaultPubkey() *PubKey {
	if m != nil {
		return m.DefaultPubkey
	}
	return nil
}

func (m *ClientConf) GetPhantomSubnetsList() *PhantomSubnetsList {
	if m != nil {
		return m.PhantomSubnetsList
	}
	return nil
}

func (m *ClientConf) GetConjurePubkey() *PubKey {
	if m != nil {
		return m.ConjurePubkey
	}
	return nil
}

func (m *ClientConf) GetDnsRegConf() *DnsRegConf {
	if m != nil {
		return m.DnsRegConf
	}
	return nil
}

func (m *ClientConf) GetAmpCacheConf() *AMPCacheConf {
	if m != nil {
		return m.AmpCacheConf
	}
	return nil
}

// Configuration for DNS registrar
type DnsRegConf struct {
	DnsRegMethod         *DnsRegMethod `protobuf:"varint,1,req,name=dns_reg_method,json=dnsRegMethod,enum=proto.DnsRegMethod" json:"dns_reg_method,omitempty"`
	Target               *string       `protobuf:"bytes,2,opt,name=target" json:"target,omitempty"`
	Domain               *string       `protobuf:"bytes,3,req,name=domain" json:"domain,omitempty"`
	Pubkey               []byte        `protobuf:"bytes,4,opt,name=pubkey" json:"pubkey,omitempty"`
	UtlsDistribution     *string       `protobuf:"bytes,5,opt,name=utls_distribution,json=utlsDistribution" json:"utls_distribution,omitempty"`
	StunServer           *string       `protobuf:"bytes,6,opt,name=stun_server,json=stunServer" json:"stun_server,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *DnsRegConf) Reset()         { *m = DnsRegConf{} }
func (m *DnsRegConf) String() string { return proto.CompactTextString(m) }
func (*DnsRegConf) ProtoMessage()    {}
func (*DnsRegConf) Descriptor() ([]byte, []int) {
	return fileDescriptor_39f66308029891ad, []int{3}
}

func (m *DnsRegConf) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DnsRegConf.Unmarshal(m, b)
}
func (m *DnsRegConf) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DnsRegConf.Marshal(b, m, deterministic)
}
func (m *DnsRegConf) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DnsRegConf.Merge(m, src)
}
func (m *DnsRegConf) XXX_Size() int {
	return xxx_messageInfo_DnsRegConf.Size(m)
}
func (m *DnsRegConf) XXX_DiscardUnknown() {
	xxx_messageInfo_DnsRegConf.DiscardUnknown(m)
}

var xxx_messageInfo_DnsRegConf proto.InternalMessageInfo

func (m *DnsRegConf) GetDnsRegMethod() DnsRegMethod {
	if m != nil && m.DnsRegMethod != nil {
		return *m.DnsRegMethod
	}
	return DnsRegMethod_UDP
}

func (m *DnsRegConf) GetTarget() string {
	if m != nil && m.Target != nil {
		return *m.Target
	}
	return ""
}

func (m *DnsRegConf) GetDomain() string {
	if m != nil && m.Domain != nil {
		return *m.Domain
	}
	return ""
}

func (m *DnsRegConf) GetPubkey() []byte {
	if m != nil {
		return m.Pubkey
	}
	return nil
}

func (m *DnsRegConf) GetUtlsDistribution() string {
	if m != nil && m.UtlsDistribution != nil {
		return *m.UtlsDistribution
	}
	return ""
}

func (m *DnsRegConf) GetStunServer() string {
	if m != nil && m.StunServer != nil {
		return *m.StunServer
	}
	return ""
}

// Configuration for AMPCache registrar
type AMPCacheConf struct {
	Ampcacheurl          *string  `protobuf:"bytes,1,req,name=ampcacheurl" json:"ampcacheurl,omitempty"`
	UtlsDistribution     *string  `protobuf:"bytes,2,opt,name=utls_distribution,json=utlsDistribution" json:"utls_distribution,omitempty"`
	StunServer           *string  `protobuf:"bytes,3,req,name=stun_server,json=stunServer" json:"stun_server,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AMPCacheConf) Reset()         { *m = AMPCacheConf{} }
func (m *AMPCacheConf) String() string { return proto.CompactTextString(m) }
func (*AMPCacheConf) ProtoMessage()    {}
func (*AMPCacheConf) Descriptor() ([]byte, []int) {
	return fileDescriptor_39f66308029891ad, []int{4}
}

func (m *AMPCacheConf) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AMPCacheConf.Unmarshal(m, b)
}
func (m *AMPCacheConf) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AMPCacheConf.Marshal(b, m, deterministic)
}
func (m *AMPCacheConf) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AMPCacheConf.Merge(m, src)
}
func (m *AMPCacheConf) XXX_Size() int {
	return xxx_messageInfo_AMPCacheConf.Size(m)
}
func (m *AMPCacheConf) XXX_DiscardUnknown() {
	xxx_messageInfo_AMPCacheConf.DiscardUnknown(m)
}

var xxx_messageInfo_AMPCacheConf proto.InternalMessageInfo

func (m *AMPCacheConf) GetAmpcacheurl() string {
	if m != nil && m.Ampcacheurl != nil {
		return *m.Ampcacheurl
	}
	return ""
}

func (m *AMPCacheConf) GetUtlsDistribution() string {
	if m != nil && m.UtlsDistribution != nil {
		return *m.UtlsDistribution
	}
	return ""
}

func (m *AMPCacheConf) GetStunServer() string {
	if m != nil && m.StunServer != nil {
		return *m.StunServer
	}
	return ""
}

type DecoyList struct {
	TlsDecoys            []*TLSDecoySpec `protobuf:"bytes,1,rep,name=tls_decoys,json=tlsDecoys" json:"tls_decoys,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *DecoyList) Reset()         { *m = DecoyList{} }
func (m *DecoyList) String() string { return proto.CompactTextString(m) }
func (*DecoyList) ProtoMessage()    {}
func (*DecoyList) Descriptor() ([]byte, []int) {
	return fileDescriptor_39f66308029891ad, []int{5}
}

func (m *DecoyList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DecoyList.Unmarshal(m, b)
}
func (m *DecoyList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DecoyList.Marshal(b, m, deterministic)
}
func (m *DecoyList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DecoyList.Merge(m, src)
}
func (m *DecoyList) XXX_Size() int {
	return xxx_messageInfo_DecoyList.Size(m)
}
func (m *DecoyList) XXX_DiscardUnknown() {
	xxx_messageInfo_DecoyList.DiscardUnknown(m)
}

var xxx_messageInfo_DecoyList proto.InternalMessageInfo

func (m *DecoyList) GetTlsDecoys() []*TLSDecoySpec {
	if m != nil {
		return m.TlsDecoys
	}
	return nil
}

type PhantomSubnetsList struct {
	WeightedSubnets      []*PhantomSubnets `protobuf:"bytes,1,rep,name=weighted_subnets,json=weightedSubnets" json:"weighted_subnets,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *PhantomSubnetsList) Reset()         { *m = PhantomSubnetsList{} }
func (m *PhantomSubnetsList) String() string { return proto.CompactTextString(m) }
func (*PhantomSubnetsList) ProtoMessage()    {}
func (*PhantomSubnetsList) Descriptor() ([]byte, []int) {
	return fileDescriptor_39f66308029891ad, []int{6}
}

func (m *PhantomSubnetsList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PhantomSubnetsList.Unmarshal(m, b)
}
func (m *PhantomSubnetsList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PhantomSubnetsList.Marshal(b, m, deterministic)
}
func (m *PhantomSubnetsList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PhantomSubnetsList.Merge(m, src)
}
func (m *PhantomSubnetsList) XXX_Size() int {
	return xxx_messageInfo_PhantomSubnetsList.Size(m)
}
func (m *PhantomSubnetsList) XXX_DiscardUnknown() {
	xxx_messageInfo_PhantomSubnetsList.DiscardUnknown(m)
}

var xxx_messageInfo_PhantomSubnetsList proto.InternalMessageInfo

func (m *PhantomSubnetsList) GetWeightedSubnets() []*PhantomSubnets {
	if m != nil {
		return m.WeightedSubnets
	}
	return nil
}

type PhantomSubnets struct {
	Weight               *uint32  `protobuf:"varint,1,opt,name=weight" json:"weight,omitempty"`
	Subnets              []string `protobuf:"bytes,2,rep,name=subnets" json:"subnets,omitempty"`
	RandomizeDstPort     *bool    `protobuf:"varint,3,opt,name=randomize_dst_port,json=randomizeDstPort" json:"randomize_dst_port,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PhantomSubnets) Reset()         { *m = PhantomSubnets{} }
func (m *PhantomSubnets) String() string { return proto.CompactTextString(m) }
func (*PhantomSubnets) ProtoMessage()    {}
func (*PhantomSubnets) Descriptor() ([]byte, []int) {
	return fileDescriptor_39f66308029891ad, []int{7}
}

func (m *PhantomSubnets) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PhantomSubnets.Unmarshal(m, b)
}
func (m *PhantomSubnets) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PhantomSubnets.Marshal(b, m, deterministic)
}
func (m *PhantomSubnets) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PhantomSubnets.Merge(m, src)
}
func (m *PhantomSubnets) XXX_Size() int {
	return xxx_messageInfo_PhantomSubnets.Size(m)
}
func (m *PhantomSubnets) XXX_DiscardUnknown() {
	xxx_messageInfo_PhantomSubnets.DiscardUnknown(m)
}

var xxx_messageInfo_PhantomSubnets proto.InternalMessageInfo

func (m *PhantomSubnets) GetWeight() uint32 {
	if m != nil && m.Weight != nil {
		return *m.Weight
	}
	return 0
}

func (m *PhantomSubnets) GetSubnets() []string {
	if m != nil {
		return m.Subnets
	}
	return nil
}

func (m *PhantomSubnets) GetRandomizeDstPort() bool {
	if m != nil && m.RandomizeDstPort != nil {
		return *m.RandomizeDstPort
	}
	return false
}

// Deflated ICE Candidate by seed2sdp package
type WebRTCICECandidate struct {
	// IP is represented in its 16-byte form
	IpUpper *uint64 `protobuf:"varint,1,req,name=ip_upper,json=ipUpper" json:"ip_upper,omitempty"`
	IpLower *uint64 `protobuf:"varint,2,req,name=ip_lower,json=ipLower" json:"ip_lower,omitempty"`
	// Composed info includes port, tcptype (unset if not tcp), candidate type (host, srflx, prflx), protocol (TCP/UDP), and component (RTP/RTCP)
	ComposedInfo         *uint32  `protobuf:"varint,3,req,name=composed_info,json=composedInfo" json:"composed_info,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WebRTCICECandidate) Reset()         { *m = WebRTCICECandidate{} }
func (m *WebRTCICECandidate) String() string { return proto.CompactTextString(m) }
func (*WebRTCICECandidate) ProtoMessage()    {}
func (*WebRTCICECandidate) Descriptor() ([]byte, []int) {
	return fileDescriptor_39f66308029891ad, []int{8}
}

func (m *WebRTCICECandidate) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WebRTCICECandidate.Unmarshal(m, b)
}
func (m *WebRTCICECandidate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WebRTCICECandidate.Marshal(b, m, deterministic)
}
func (m *WebRTCICECandidate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WebRTCICECandidate.Merge(m, src)
}
func (m *WebRTCICECandidate) XXX_Size() int {
	return xxx_messageInfo_WebRTCICECandidate.Size(m)
}
func (m *WebRTCICECandidate) XXX_DiscardUnknown() {
	xxx_messageInfo_WebRTCICECandidate.DiscardUnknown(m)
}

var xxx_messageInfo_WebRTCICECandidate proto.InternalMessageInfo

func (m *WebRTCICECandidate) GetIpUpper() uint64 {
	if m != nil && m.IpUpper != nil {
		return *m.IpUpper
	}
	return 0
}

func (m *WebRTCICECandidate) GetIpLower() uint64 {
	if m != nil && m.IpLower != nil {
		return *m.IpLower
	}
	return 0
}

func (m *WebRTCICECandidate) GetComposedInfo() uint32 {
	if m != nil && m.ComposedInfo != nil {
		return *m.ComposedInfo
	}
	return 0
}

// Deflated SDP for WebRTC by seed2sdp package
type WebRTCSDP struct {
	Type                 *uint32               `protobuf:"varint,1,req,name=type" json:"type,omitempty"`
	Candidates           []*WebRTCICECandidate `protobuf:"bytes,2,rep,name=candidates" json:"candidates,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *WebRTCSDP) Reset()         { *m = WebRTCSDP{} }
func (m *WebRTCSDP) String() string { return proto.CompactTextString(m) }
func (*WebRTCSDP) ProtoMessage()    {}
func (*WebRTCSDP) Descriptor() ([]byte, []int) {
	return fileDescriptor_39f66308029891ad, []int{9}
}

func (m *WebRTCSDP) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WebRTCSDP.Unmarshal(m, b)
}
func (m *WebRTCSDP) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WebRTCSDP.Marshal(b, m, deterministic)
}
func (m *WebRTCSDP) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WebRTCSDP.Merge(m, src)
}
func (m *WebRTCSDP) XXX_Size() int {
	return xxx_messageInfo_WebRTCSDP.Size(m)
}
func (m *WebRTCSDP) XXX_DiscardUnknown() {
	xxx_messageInfo_WebRTCSDP.DiscardUnknown(m)
}

var xxx_messageInfo_WebRTCSDP proto.InternalMessageInfo

func (m *WebRTCSDP) GetType() uint32 {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return 0
}

func (m *WebRTCSDP) GetCandidates() []*WebRTCICECandidate {
	if m != nil {
		return m.Candidates
	}
	return nil
}

// WebRTCSignal includes a deflated SDP and a seed
type WebRTCSignal struct {
	Seed                 *string    `protobuf:"bytes,1,req,name=seed" json:"seed,omitempty"`
	Sdp                  *WebRTCSDP `protobuf:"bytes,2,req,name=sdp" json:"sdp,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *WebRTCSignal) Reset()         { *m = WebRTCSignal{} }
func (m *WebRTCSignal) String() string { return proto.CompactTextString(m) }
func (*WebRTCSignal) ProtoMessage()    {}
func (*WebRTCSignal) Descriptor() ([]byte, []int) {
	return fileDescriptor_39f66308029891ad, []int{10}
}

func (m *WebRTCSignal) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WebRTCSignal.Unmarshal(m, b)
}
func (m *WebRTCSignal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WebRTCSignal.Marshal(b, m, deterministic)
}
func (m *WebRTCSignal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WebRTCSignal.Merge(m, src)
}
func (m *WebRTCSignal) XXX_Size() int {
	return xxx_messageInfo_WebRTCSignal.Size(m)
}
func (m *WebRTCSignal) XXX_DiscardUnknown() {
	xxx_messageInfo_WebRTCSignal.DiscardUnknown(m)
}

var xxx_messageInfo_WebRTCSignal proto.InternalMessageInfo

func (m *WebRTCSignal) GetSeed() string {
	if m != nil && m.Seed != nil {
		return *m.Seed
	}
	return ""
}

func (m *WebRTCSignal) GetSdp() *WebRTCSDP {
	if m != nil {
		return m.Sdp
	}
	return nil
}

type Addr struct {
	IP                   []byte   `protobuf:"bytes,1,opt,name=IP" json:"IP,omitempty"`
	Port                 *uint32  `protobuf:"varint,2,opt,name=Port" json:"Port,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Addr) Reset()         { *m = Addr{} }
func (m *Addr) String() string { return proto.CompactTextString(m) }
func (*Addr) ProtoMessage()    {}
func (*Addr) Descriptor() ([]byte, []int) {
	return fileDescriptor_39f66308029891ad, []int{11}
}

func (m *Addr) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Addr.Unmarshal(m, b)
}
func (m *Addr) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Addr.Marshal(b, m, deterministic)
}
func (m *Addr) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Addr.Merge(m, src)
}
func (m *Addr) XXX_Size() int {
	return xxx_messageInfo_Addr.Size(m)
}
func (m *Addr) XXX_DiscardUnknown() {
	xxx_messageInfo_Addr.DiscardUnknown(m)
}

var xxx_messageInfo_Addr proto.InternalMessageInfo

func (m *Addr) GetIP() []byte {
	if m != nil {
		return m.IP
	}
	return nil
}

func (m *Addr) GetPort() uint32 {
	if m != nil && m.Port != nil {
		return *m.Port
	}
	return 0
}

type DTLSTransportParams struct {
	SrcAddr4         *Addr `protobuf:"bytes,1,opt,name=src_addr4,json=srcAddr4" json:"src_addr4,omitempty"`
	SrcAddr6         *Addr `protobuf:"bytes,2,opt,name=src_addr6,json=srcAddr6" json:"src_addr6,omitempty"`
	RandomizeDstPort *bool `protobuf:"varint,3,opt,name=randomize_dst_port,json=randomizeDstPort" json:"randomize_dst_port,omitempty"`
	// Unordered sets the reliability of the DTLS stream to unordered
	Unordered            *bool    `protobuf:"varint,4,opt,name=unordered" json:"unordered,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DTLSTransportParams) Reset()         { *m = DTLSTransportParams{} }
func (m *DTLSTransportParams) String() string { return proto.CompactTextString(m) }
func (*DTLSTransportParams) ProtoMessage()    {}
func (*DTLSTransportParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_39f66308029891ad, []int{12}
}

func (m *DTLSTransportParams) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DTLSTransportParams.Unmarshal(m, b)
}
func (m *DTLSTransportParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DTLSTransportParams.Marshal(b, m, deterministic)
}
func (m *DTLSTransportParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DTLSTransportParams.Merge(m, src)
}
func (m *DTLSTransportParams) XXX_Size() int {
	return xxx_messageInfo_DTLSTransportParams.Size(m)
}
func (m *DTLSTransportParams) XXX_DiscardUnknown() {
	xxx_messageInfo_DTLSTransportParams.DiscardUnknown(m)
}

var xxx_messageInfo_DTLSTransportParams proto.InternalMessageInfo

func (m *DTLSTransportParams) GetSrcAddr4() *Addr {
	if m != nil {
		return m.SrcAddr4
	}
	return nil
}

func (m *DTLSTransportParams) GetSrcAddr6() *Addr {
	if m != nil {
		return m.SrcAddr6
	}
	return nil
}

func (m *DTLSTransportParams) GetRandomizeDstPort() bool {
	if m != nil && m.RandomizeDstPort != nil {
		return *m.RandomizeDstPort
	}
	return false
}

func (m *DTLSTransportParams) GetUnordered() bool {
	if m != nil && m.Unordered != nil {
		return *m.Unordered
	}
	return false
}

type StationToClient struct {
	// Should accompany (at least) SESSION_INIT and CONFIRM_RECONNECT.
	ProtocolVersion *uint32 `protobuf:"varint,1,opt,name=protocol_version,json=protocolVersion" json:"protocol_version,omitempty"`
	// There might be a state transition. May be absent; absence should be
	// treated identically to NO_CHANGE.
	StateTransition *S2C_Transition `protobuf:"varint,2,opt,name=state_transition,json=stateTransition,enum=proto.S2C_Transition" json:"state_transition,omitempty"`
	// The station can send client config info piggybacked
	// on any message, as it sees fit
	ConfigInfo *ClientConf `protobuf:"bytes,3,opt,name=config_info,json=configInfo" json:"config_info,omitempty"`
	// If state_transition == S2C_ERROR, this field is the explanation.
	ErrReason *ErrorReasonS2C `protobuf:"varint,4,opt,name=err_reason,json=errReason,enum=proto.ErrorReasonS2C" json:"err_reason,omitempty"`
	// Signals client to stop connecting for following amount of seconds
	TmpBackoff *uint32 `protobuf:"varint,5,opt,name=tmp_backoff,json=tmpBackoff" json:"tmp_backoff,omitempty"`
	// Sent in SESSION_INIT, identifies the station that picked up
	StationId *string `protobuf:"bytes,6,opt,name=station_id,json=stationId" json:"station_id,omitempty"`
	// Random-sized junk to defeat packet size fingerprinting.
	Padding              []byte   `protobuf:"bytes,100,opt,name=padding" json:"padding,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StationToClient) Reset()         { *m = StationToClient{} }
func (m *StationToClient) String() string { return proto.CompactTextString(m) }
func (*StationToClient) ProtoMessage()    {}
func (*StationToClient) Descriptor() ([]byte, []int) {
	return fileDescriptor_39f66308029891ad, []int{13}
}

func (m *StationToClient) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StationToClient.Unmarshal(m, b)
}
func (m *StationToClient) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StationToClient.Marshal(b, m, deterministic)
}
func (m *StationToClient) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StationToClient.Merge(m, src)
}
func (m *StationToClient) XXX_Size() int {
	return xxx_messageInfo_StationToClient.Size(m)
}
func (m *StationToClient) XXX_DiscardUnknown() {
	xxx_messageInfo_StationToClient.DiscardUnknown(m)
}

var xxx_messageInfo_StationToClient proto.InternalMessageInfo

func (m *StationToClient) GetProtocolVersion() uint32 {
	if m != nil && m.ProtocolVersion != nil {
		return *m.ProtocolVersion
	}
	return 0
}

func (m *StationToClient) GetStateTransition() S2C_Transition {
	if m != nil && m.StateTransition != nil {
		return *m.StateTransition
	}
	return S2C_Transition_S2C_NO_CHANGE
}

func (m *StationToClient) GetConfigInfo() *ClientConf {
	if m != nil {
		return m.ConfigInfo
	}
	return nil
}

func (m *StationToClient) GetErrReason() ErrorReasonS2C {
	if m != nil && m.ErrReason != nil {
		return *m.ErrReason
	}
	return ErrorReasonS2C_NO_ERROR
}

func (m *StationToClient) GetTmpBackoff() uint32 {
	if m != nil && m.TmpBackoff != nil {
		return *m.TmpBackoff
	}
	return 0
}

func (m *StationToClient) GetStationId() string {
	if m != nil && m.StationId != nil {
		return *m.StationId
	}
	return ""
}

func (m *StationToClient) GetPadding() []byte {
	if m != nil {
		return m.Padding
	}
	return nil
}

type RegistrationFlags struct {
	UploadOnly           *bool    `protobuf:"varint,1,opt,name=upload_only,json=uploadOnly" json:"upload_only,omitempty"`
	DarkDecoy            *bool    `protobuf:"varint,2,opt,name=dark_decoy,json=darkDecoy" json:"dark_decoy,omitempty"`
	ProxyHeader          *bool    `protobuf:"varint,3,opt,name=proxy_header,json=proxyHeader" json:"proxy_header,omitempty"`
	Use_TIL              *bool    `protobuf:"varint,4,opt,name=use_TIL,json=useTIL" json:"use_TIL,omitempty"`
	Prescanned           *bool    `protobuf:"varint,5,opt,name=prescanned" json:"prescanned,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RegistrationFlags) Reset()         { *m = RegistrationFlags{} }
func (m *RegistrationFlags) String() string { return proto.CompactTextString(m) }
func (*RegistrationFlags) ProtoMessage()    {}
func (*RegistrationFlags) Descriptor() ([]byte, []int) {
	return fileDescriptor_39f66308029891ad, []int{14}
}

func (m *RegistrationFlags) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RegistrationFlags.Unmarshal(m, b)
}
func (m *RegistrationFlags) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RegistrationFlags.Marshal(b, m, deterministic)
}
func (m *RegistrationFlags) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegistrationFlags.Merge(m, src)
}
func (m *RegistrationFlags) XXX_Size() int {
	return xxx_messageInfo_RegistrationFlags.Size(m)
}
func (m *RegistrationFlags) XXX_DiscardUnknown() {
	xxx_messageInfo_RegistrationFlags.DiscardUnknown(m)
}

var xxx_messageInfo_RegistrationFlags proto.InternalMessageInfo

func (m *RegistrationFlags) GetUploadOnly() bool {
	if m != nil && m.UploadOnly != nil {
		return *m.UploadOnly
	}
	return false
}

func (m *RegistrationFlags) GetDarkDecoy() bool {
	if m != nil && m.DarkDecoy != nil {
		return *m.DarkDecoy
	}
	return false
}

func (m *RegistrationFlags) GetProxyHeader() bool {
	if m != nil && m.ProxyHeader != nil {
		return *m.ProxyHeader
	}
	return false
}

func (m *RegistrationFlags) GetUse_TIL() bool {
	if m != nil && m.Use_TIL != nil {
		return *m.Use_TIL
	}
	return false
}

func (m *RegistrationFlags) GetPrescanned() bool {
	if m != nil && m.Prescanned != nil {
		return *m.Prescanned
	}
	return false
}

type ClientToStation struct {
	ProtocolVersion *uint32 `protobuf:"varint,1,opt,name=protocol_version,json=protocolVersion" json:"protocol_version,omitempty"`
	// The client reports its decoy list's version number here, which the
	// station can use to decide whether to send an updated one. The station
	// should always send a list if this field is set to 0.
	DecoyListGeneration *uint32         `protobuf:"varint,2,opt,name=decoy_list_generation,json=decoyListGeneration" json:"decoy_list_generation,omitempty"`
	StateTransition     *C2S_Transition `protobuf:"varint,3,opt,name=state_transition,json=stateTransition,enum=proto.C2S_Transition" json:"state_transition,omitempty"`
	// The position in the overall session's upload sequence where the current
	// YIELD=>ACQUIRE switchover is happening.
	UploadSync *uint64 `protobuf:"varint,4,opt,name=upload_sync,json=uploadSync" json:"upload_sync,omitempty"`
	// High level client library version used for indicating feature support, or
	// lack therof.
	ClientLibVersion *uint32 `protobuf:"varint,5,opt,name=client_lib_version,json=clientLibVersion" json:"client_lib_version,omitempty"`
	// Indicates whether the client will allow the registrar to provide alternative parameters that
	// may work better in substitute for the deterministically selected parameters. This only works
	// for bidirectional registration methods where the client receives a RegistrationResponse.
	DisableRegistrarOverrides *bool `protobuf:"varint,6,opt,name=disable_registrar_overrides,json=disableRegistrarOverrides" json:"disable_registrar_overrides,omitempty"`
	// List of decoys that client have unsuccessfully tried in current session.
	// Could be sent in chunks
	FailedDecoys []string      `protobuf:"bytes,10,rep,name=failed_decoys,json=failedDecoys" json:"failed_decoys,omitempty"`
	Stats        *SessionStats `protobuf:"bytes,11,opt,name=stats" json:"stats,omitempty"`
	// NullTransport, MinTransport, Obfs4Transport, etc. Transport type we want from phantom proxy
	Transport       *TransportType `protobuf:"varint,12,opt,name=transport,enum=proto.TransportType" json:"transport,omitempty"`
	TransportParams *anypb.Any     `protobuf:"bytes,13,opt,name=transport_params,json=transportParams" json:"transport_params,omitempty"`
	// Station is only required to check this variable during session initialization.
	// If set, station must facilitate connection to said target by itself, i.e. write into squid
	// socket an HTTP/SOCKS/any other connection request.
	// covert_address must have exactly one ':' colon, that separates host (literal IP address or
	// resolvable hostname) and port
	// TODO: make it required for initialization, and stop connecting any client straight to squid?
	CovertAddress *string `protobuf:"bytes,20,opt,name=covert_address,json=covertAddress" json:"covert_address,omitempty"`
	// Used in dark decoys to signal which dark decoy it will connect to.
	MaskedDecoyServerName *string `protobuf:"bytes,21,opt,name=masked_decoy_server_name,json=maskedDecoyServerName" json:"masked_decoy_server_name,omitempty"`
	// Used to indicate to server if client is registering v4, v6 or both
	V6Support *bool `protobuf:"varint,22,opt,name=v6_support,json=v6Support" json:"v6_support,omitempty"`
	V4Support *bool `protobuf:"varint,23,opt,name=v4_support,json=v4Support" json:"v4_support,omitempty"`
	// A collection of optional flags for the registration.
	Flags *RegistrationFlags `protobuf:"bytes,24,opt,name=flags" json:"flags,omitempty"`
	// Transport Extensions
	// TODO(jmwample) - move to WebRTC specific transport params protobuf message.
	WebrtcSignal *WebRTCSignal `protobuf:"bytes,31,opt,name=webrtc_signal,json=webrtcSignal" json:"webrtc_signal,omitempty"`
	// Random-sized junk to defeat packet size fingerprinting.
	Padding              []byte   `protobuf:"bytes,100,opt,name=padding" json:"padding,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ClientToStation) Reset()         { *m = ClientToStation{} }
func (m *ClientToStation) String() string { return proto.CompactTextString(m) }
func (*ClientToStation) ProtoMessage()    {}
func (*ClientToStation) Descriptor() ([]byte, []int) {
	return fileDescriptor_39f66308029891ad, []int{15}
}

func (m *ClientToStation) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ClientToStation.Unmarshal(m, b)
}
func (m *ClientToStation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ClientToStation.Marshal(b, m, deterministic)
}
func (m *ClientToStation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClientToStation.Merge(m, src)
}
func (m *ClientToStation) XXX_Size() int {
	return xxx_messageInfo_ClientToStation.Size(m)
}
func (m *ClientToStation) XXX_DiscardUnknown() {
	xxx_messageInfo_ClientToStation.DiscardUnknown(m)
}

var xxx_messageInfo_ClientToStation proto.InternalMessageInfo

func (m *ClientToStation) GetProtocolVersion() uint32 {
	if m != nil && m.ProtocolVersion != nil {
		return *m.ProtocolVersion
	}
	return 0
}

func (m *ClientToStation) GetDecoyListGeneration() uint32 {
	if m != nil && m.DecoyListGeneration != nil {
		return *m.DecoyListGeneration
	}
	return 0
}

func (m *ClientToStation) GetStateTransition() C2S_Transition {
	if m != nil && m.StateTransition != nil {
		return *m.StateTransition
	}
	return C2S_Transition_C2S_NO_CHANGE
}

func (m *ClientToStation) GetUploadSync() uint64 {
	if m != nil && m.UploadSync != nil {
		return *m.UploadSync
	}
	return 0
}

func (m *ClientToStation) GetClientLibVersion() uint32 {
	if m != nil && m.ClientLibVersion != nil {
		return *m.ClientLibVersion
	}
	return 0
}

func (m *ClientToStation) GetDisableRegistrarOverrides() bool {
	if m != nil && m.DisableRegistrarOverrides != nil {
		return *m.DisableRegistrarOverrides
	}
	return false
}

func (m *ClientToStation) GetFailedDecoys() []string {
	if m != nil {
		return m.FailedDecoys
	}
	return nil
}

func (m *ClientToStation) GetStats() *SessionStats {
	if m != nil {
		return m.Stats
	}
	return nil
}

func (m *ClientToStation) GetTransport() TransportType {
	if m != nil && m.Transport != nil {
		return *m.Transport
	}
	return TransportType_Null
}

func (m *ClientToStation) GetTransportParams() *anypb.Any {
	if m != nil {
		return m.TransportParams
	}
	return nil
}

func (m *ClientToStation) GetCovertAddress() string {
	if m != nil && m.CovertAddress != nil {
		return *m.CovertAddress
	}
	return ""
}

func (m *ClientToStation) GetMaskedDecoyServerName() string {
	if m != nil && m.MaskedDecoyServerName != nil {
		return *m.MaskedDecoyServerName
	}
	return ""
}

func (m *ClientToStation) GetV6Support() bool {
	if m != nil && m.V6Support != nil {
		return *m.V6Support
	}
	return false
}

func (m *ClientToStation) GetV4Support() bool {
	if m != nil && m.V4Support != nil {
		return *m.V4Support
	}
	return false
}

func (m *ClientToStation) GetFlags() *RegistrationFlags {
	if m != nil {
		return m.Flags
	}
	return nil
}

func (m *ClientToStation) GetWebrtcSignal() *WebRTCSignal {
	if m != nil {
		return m.WebrtcSignal
	}
	return nil
}

func (m *ClientToStation) GetPadding() []byte {
	if m != nil {
		return m.Padding
	}
	return nil
}

type PrefixTransportParams struct {
	// Prefix Identifier
	PrefixId *int32 `protobuf:"varint,1,opt,name=prefix_id,json=prefixId" json:"prefix_id,omitempty"`
	// Prefix bytes (optional - usually sent from station to client as override if allowed by C2S)
	// as the station cannot take this into account when attempting to identify a connection.
	Prefix            []byte `protobuf:"bytes,2,opt,name=prefix" json:"prefix,omitempty"`
	CustomFlushPolicy *int32 `protobuf:"varint,3,opt,name=custom_flush_policy,json=customFlushPolicy" json:"custom_flush_policy,omitempty"`
	// Indicates whether the client has elected to use destination port randomization. Should be
	// checked against selected transport to ensure that destination port randomization is
	// supported.
	RandomizeDstPort     *bool    `protobuf:"varint,13,opt,name=randomize_dst_port,json=randomizeDstPort" json:"randomize_dst_port,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PrefixTransportParams) Reset()         { *m = PrefixTransportParams{} }
func (m *PrefixTransportParams) String() string { return proto.CompactTextString(m) }
func (*PrefixTransportParams) ProtoMessage()    {}
func (*PrefixTransportParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_39f66308029891ad, []int{16}
}

func (m *PrefixTransportParams) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PrefixTransportParams.Unmarshal(m, b)
}
func (m *PrefixTransportParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PrefixTransportParams.Marshal(b, m, deterministic)
}
func (m *PrefixTransportParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PrefixTransportParams.Merge(m, src)
}
func (m *PrefixTransportParams) XXX_Size() int {
	return xxx_messageInfo_PrefixTransportParams.Size(m)
}
func (m *PrefixTransportParams) XXX_DiscardUnknown() {
	xxx_messageInfo_PrefixTransportParams.DiscardUnknown(m)
}

var xxx_messageInfo_PrefixTransportParams proto.InternalMessageInfo

func (m *PrefixTransportParams) GetPrefixId() int32 {
	if m != nil && m.PrefixId != nil {
		return *m.PrefixId
	}
	return 0
}

func (m *PrefixTransportParams) GetPrefix() []byte {
	if m != nil {
		return m.Prefix
	}
	return nil
}

func (m *PrefixTransportParams) GetCustomFlushPolicy() int32 {
	if m != nil && m.CustomFlushPolicy != nil {
		return *m.CustomFlushPolicy
	}
	return 0
}

func (m *PrefixTransportParams) GetRandomizeDstPort() bool {
	if m != nil && m.RandomizeDstPort != nil {
		return *m.RandomizeDstPort
	}
	return false
}

type GenericTransportParams struct {
	// Indicates whether the client has elected to use destination port randomization. Should be
	// checked against selected transport to ensure that destination port randomization is
	// supported.
	RandomizeDstPort     *bool    `protobuf:"varint,13,opt,name=randomize_dst_port,json=randomizeDstPort" json:"randomize_dst_port,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GenericTransportParams) Reset()         { *m = GenericTransportParams{} }
func (m *GenericTransportParams) String() string { return proto.CompactTextString(m) }
func (*GenericTransportParams) ProtoMessage()    {}
func (*GenericTransportParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_39f66308029891ad, []int{17}
}

func (m *GenericTransportParams) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GenericTransportParams.Unmarshal(m, b)
}
func (m *GenericTransportParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GenericTransportParams.Marshal(b, m, deterministic)
}
func (m *GenericTransportParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenericTransportParams.Merge(m, src)
}
func (m *GenericTransportParams) XXX_Size() int {
	return xxx_messageInfo_GenericTransportParams.Size(m)
}
func (m *GenericTransportParams) XXX_DiscardUnknown() {
	xxx_messageInfo_GenericTransportParams.DiscardUnknown(m)
}

var xxx_messageInfo_GenericTransportParams proto.InternalMessageInfo

func (m *GenericTransportParams) GetRandomizeDstPort() bool {
	if m != nil && m.RandomizeDstPort != nil {
		return *m.RandomizeDstPort
	}
	return false
}

type C2SWrapper struct {
	SharedSecret        []byte              `protobuf:"bytes,1,opt,name=shared_secret,json=sharedSecret" json:"shared_secret,omitempty"`
	RegistrationPayload *ClientToStation    `protobuf:"bytes,3,opt,name=registration_payload,json=registrationPayload" json:"registration_payload,omitempty"`
	RegistrationSource  *RegistrationSource `protobuf:"varint,4,opt,name=registration_source,json=registrationSource,enum=proto.RegistrationSource" json:"registration_source,omitempty"`
	// client source address when receiving a registration
	RegistrationAddress []byte `protobuf:"bytes,6,opt,name=registration_address,json=registrationAddress" json:"registration_address,omitempty"`
	// Decoy address used when registering over Decoy registrar
	DecoyAddress []byte `protobuf:"bytes,7,opt,name=decoy_address,json=decoyAddress" json:"decoy_address,omitempty"`
	// The next three fields allow an independent registrar (trusted by a station w/ a zmq keypair) to
	// share the registration overrides that it assigned to the client with the station(s).
	// Registration Respose is here to allow a parsed object with direct access to the fields within.
	// RegRespBytes provides a serialized verion of the Registration response so that the signature of
	// the Bidirectional registrar can be validated before a station applies any overrides present in
	// the Registration Response.
	//
	// If you are reading this in the future and you want to extend the functionality here it might
	// make sense to make the RegistrationResponse that is sent to the client a distinct message from
	// the one that gets sent to the stations.
	RegistrationResponse *RegistrationResponse `protobuf:"bytes,8,opt,name=registration_response,json=registrationResponse" json:"registration_response,omitempty"`
	RegRespBytes         []byte                `protobuf:"bytes,9,opt,name=RegRespBytes" json:"RegRespBytes,omitempty"`
	RegRespSignature     []byte                `protobuf:"bytes,10,opt,name=RegRespSignature" json:"RegRespSignature,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *C2SWrapper) Reset()         { *m = C2SWrapper{} }
func (m *C2SWrapper) String() string { return proto.CompactTextString(m) }
func (*C2SWrapper) ProtoMessage()    {}
func (*C2SWrapper) Descriptor() ([]byte, []int) {
	return fileDescriptor_39f66308029891ad, []int{18}
}

func (m *C2SWrapper) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_C2SWrapper.Unmarshal(m, b)
}
func (m *C2SWrapper) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_C2SWrapper.Marshal(b, m, deterministic)
}
func (m *C2SWrapper) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2SWrapper.Merge(m, src)
}
func (m *C2SWrapper) XXX_Size() int {
	return xxx_messageInfo_C2SWrapper.Size(m)
}
func (m *C2SWrapper) XXX_DiscardUnknown() {
	xxx_messageInfo_C2SWrapper.DiscardUnknown(m)
}

var xxx_messageInfo_C2SWrapper proto.InternalMessageInfo

func (m *C2SWrapper) GetSharedSecret() []byte {
	if m != nil {
		return m.SharedSecret
	}
	return nil
}

func (m *C2SWrapper) GetRegistrationPayload() *ClientToStation {
	if m != nil {
		return m.RegistrationPayload
	}
	return nil
}

func (m *C2SWrapper) GetRegistrationSource() RegistrationSource {
	if m != nil && m.RegistrationSource != nil {
		return *m.RegistrationSource
	}
	return RegistrationSource_Unspecified
}

func (m *C2SWrapper) GetRegistrationAddress() []byte {
	if m != nil {
		return m.RegistrationAddress
	}
	return nil
}

func (m *C2SWrapper) GetDecoyAddress() []byte {
	if m != nil {
		return m.DecoyAddress
	}
	return nil
}

func (m *C2SWrapper) GetRegistrationResponse() *RegistrationResponse {
	if m != nil {
		return m.RegistrationResponse
	}
	return nil
}

func (m *C2SWrapper) GetRegRespBytes() []byte {
	if m != nil {
		return m.RegRespBytes
	}
	return nil
}

func (m *C2SWrapper) GetRegRespSignature() []byte {
	if m != nil {
		return m.RegRespSignature
	}
	return nil
}

type SessionStats struct {
	FailedDecoysAmount *uint32 `protobuf:"varint,20,opt,name=failed_decoys_amount,json=failedDecoysAmount" json:"failed_decoys_amount,omitempty"`
	// Applicable to whole session:
	TotalTimeToConnect *uint32 `protobuf:"varint,31,opt,name=total_time_to_connect,json=totalTimeToConnect" json:"total_time_to_connect,omitempty"`
	// Last (i.e. successful) decoy:
	RttToStation         *uint32  `protobuf:"varint,33,opt,name=rtt_to_station,json=rttToStation" json:"rtt_to_station,omitempty"`
	TlsToDecoy           *uint32  `protobuf:"varint,38,opt,name=tls_to_decoy,json=tlsToDecoy" json:"tls_to_decoy,omitempty"`
	TcpToDecoy           *uint32  `protobuf:"varint,39,opt,name=tcp_to_decoy,json=tcpToDecoy" json:"tcp_to_decoy,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SessionStats) Reset()         { *m = SessionStats{} }
func (m *SessionStats) String() string { return proto.CompactTextString(m) }
func (*SessionStats) ProtoMessage()    {}
func (*SessionStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_39f66308029891ad, []int{19}
}

func (m *SessionStats) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SessionStats.Unmarshal(m, b)
}
func (m *SessionStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SessionStats.Marshal(b, m, deterministic)
}
func (m *SessionStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SessionStats.Merge(m, src)
}
func (m *SessionStats) XXX_Size() int {
	return xxx_messageInfo_SessionStats.Size(m)
}
func (m *SessionStats) XXX_DiscardUnknown() {
	xxx_messageInfo_SessionStats.DiscardUnknown(m)
}

var xxx_messageInfo_SessionStats proto.InternalMessageInfo

func (m *SessionStats) GetFailedDecoysAmount() uint32 {
	if m != nil && m.FailedDecoysAmount != nil {
		return *m.FailedDecoysAmount
	}
	return 0
}

func (m *SessionStats) GetTotalTimeToConnect() uint32 {
	if m != nil && m.TotalTimeToConnect != nil {
		return *m.TotalTimeToConnect
	}
	return 0
}

func (m *SessionStats) GetRttToStation() uint32 {
	if m != nil && m.RttToStation != nil {
		return *m.RttToStation
	}
	return 0
}

func (m *SessionStats) GetTlsToDecoy() uint32 {
	if m != nil && m.TlsToDecoy != nil {
		return *m.TlsToDecoy
	}
	return 0
}

func (m *SessionStats) GetTcpToDecoy() uint32 {
	if m != nil && m.TcpToDecoy != nil {
		return *m.TcpToDecoy
	}
	return 0
}

type StationToDetector struct {
	PhantomIp            *string            `protobuf:"bytes,1,opt,name=phantom_ip,json=phantomIp" json:"phantom_ip,omitempty"`
	ClientIp             *string            `protobuf:"bytes,2,opt,name=client_ip,json=clientIp" json:"client_ip,omitempty"`
	TimeoutNs            *uint64            `protobuf:"varint,3,opt,name=timeout_ns,json=timeoutNs" json:"timeout_ns,omitempty"`
	Operation            *StationOperations `protobuf:"varint,4,opt,name=operation,enum=proto.StationOperations" json:"operation,omitempty"`
	DstPort              *uint32            `protobuf:"varint,10,opt,name=dst_port,json=dstPort" json:"dst_port,omitempty"`
	SrcPort              *uint32            `protobuf:"varint,11,opt,name=src_port,json=srcPort" json:"src_port,omitempty"`
	Proto                *IPProto           `protobuf:"varint,12,opt,name=proto,enum=proto.IPProto" json:"proto,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *StationToDetector) Reset()         { *m = StationToDetector{} }
func (m *StationToDetector) String() string { return proto.CompactTextString(m) }
func (*StationToDetector) ProtoMessage()    {}
func (*StationToDetector) Descriptor() ([]byte, []int) {
	return fileDescriptor_39f66308029891ad, []int{20}
}

func (m *StationToDetector) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StationToDetector.Unmarshal(m, b)
}
func (m *StationToDetector) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StationToDetector.Marshal(b, m, deterministic)
}
func (m *StationToDetector) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StationToDetector.Merge(m, src)
}
func (m *StationToDetector) XXX_Size() int {
	return xxx_messageInfo_StationToDetector.Size(m)
}
func (m *StationToDetector) XXX_DiscardUnknown() {
	xxx_messageInfo_StationToDetector.DiscardUnknown(m)
}

var xxx_messageInfo_StationToDetector proto.InternalMessageInfo

func (m *StationToDetector) GetPhantomIp() string {
	if m != nil && m.PhantomIp != nil {
		return *m.PhantomIp
	}
	return ""
}

func (m *StationToDetector) GetClientIp() string {
	if m != nil && m.ClientIp != nil {
		return *m.ClientIp
	}
	return ""
}

func (m *StationToDetector) GetTimeoutNs() uint64 {
	if m != nil && m.TimeoutNs != nil {
		return *m.TimeoutNs
	}
	return 0
}

func (m *StationToDetector) GetOperation() StationOperations {
	if m != nil && m.Operation != nil {
		return *m.Operation
	}
	return StationOperations_Unknown
}

func (m *StationToDetector) GetDstPort() uint32 {
	if m != nil && m.DstPort != nil {
		return *m.DstPort
	}
	return 0
}

func (m *StationToDetector) GetSrcPort() uint32 {
	if m != nil && m.SrcPort != nil {
		return *m.SrcPort
	}
	return 0
}

func (m *StationToDetector) GetProto() IPProto {
	if m != nil && m.Proto != nil {
		return *m.Proto
	}
	return IPProto_Unk
}

// Adding message response from Station to Client for bidirectional API
type RegistrationResponse struct {
	Ipv4Addr *uint32 `protobuf:"fixed32,1,opt,name=ipv4addr" json:"ipv4addr,omitempty"`
	// The 128-bit ipv6 address, in network byte order
	Ipv6Addr []byte `protobuf:"bytes,2,opt,name=ipv6addr" json:"ipv6addr,omitempty"`
	// Respond with randomized port
	DstPort *uint32 `protobuf:"varint,3,opt,name=dst_port,json=dstPort" json:"dst_port,omitempty"`
	// Future: station provides client with secret, want chanel present
	// Leave null for now
	ServerRandom []byte `protobuf:"bytes,4,opt,name=serverRandom" json:"serverRandom,omitempty"`
	// If registration wrong, populate this error string
	Error *string `protobuf:"bytes,5,opt,name=error" json:"error,omitempty"`
	// ClientConf field (optional)
	ClientConf *ClientConf `protobuf:"bytes,6,opt,name=clientConf" json:"clientConf,omitempty"`
	// Transport Params to if `allow_registrar_overrides` is set.
	TransportParams *anypb.Any `protobuf:"bytes,10,opt,name=transport_params,json=transportParams" json:"transport_params,omitempty"`
	// PhantomsSupportPortRand is a flag that indicates whether the selected phantoms are able to
	// handle phantom connections to randomized ports.
	PhantomsSupportPortRand *bool    `protobuf:"varint,11,opt,name=phantoms_support_port_rand,json=phantomsSupportPortRand" json:"phantoms_support_port_rand,omitempty"`
	XXX_NoUnkeyedLiteral    struct{} `json:"-"`
	XXX_unrecognized        []byte   `json:"-"`
	XXX_sizecache           int32    `json:"-"`
}

func (m *RegistrationResponse) Reset()         { *m = RegistrationResponse{} }
func (m *RegistrationResponse) String() string { return proto.CompactTextString(m) }
func (*RegistrationResponse) ProtoMessage()    {}
func (*RegistrationResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_39f66308029891ad, []int{21}
}

func (m *RegistrationResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RegistrationResponse.Unmarshal(m, b)
}
func (m *RegistrationResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RegistrationResponse.Marshal(b, m, deterministic)
}
func (m *RegistrationResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegistrationResponse.Merge(m, src)
}
func (m *RegistrationResponse) XXX_Size() int {
	return xxx_messageInfo_RegistrationResponse.Size(m)
}
func (m *RegistrationResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RegistrationResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RegistrationResponse proto.InternalMessageInfo

func (m *RegistrationResponse) GetIpv4Addr() uint32 {
	if m != nil && m.Ipv4Addr != nil {
		return *m.Ipv4Addr
	}
	return 0
}

func (m *RegistrationResponse) GetIpv6Addr() []byte {
	if m != nil {
		return m.Ipv6Addr
	}
	return nil
}

func (m *RegistrationResponse) GetDstPort() uint32 {
	if m != nil && m.DstPort != nil {
		return *m.DstPort
	}
	return 0
}

func (m *RegistrationResponse) GetServerRandom() []byte {
	if m != nil {
		return m.ServerRandom
	}
	return nil
}

func (m *RegistrationResponse) GetError() string {
	if m != nil && m.Error != nil {
		return *m.Error
	}
	return ""
}

func (m *RegistrationResponse) GetClientConf() *ClientConf {
	if m != nil {
		return m.ClientConf
	}
	return nil
}

func (m *RegistrationResponse) GetTransportParams() *anypb.Any {
	if m != nil {
		return m.TransportParams
	}
	return nil
}

func (m *RegistrationResponse) GetPhantomsSupportPortRand() bool {
	if m != nil && m.PhantomsSupportPortRand != nil {
		return *m.PhantomsSupportPortRand
	}
	return false
}

// response from dns
type DnsResponse struct {
	Success               *bool                 `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
	ClientconfOutdated    *bool                 `protobuf:"varint,2,opt,name=clientconf_outdated,json=clientconfOutdated" json:"clientconf_outdated,omitempty"`
	BidirectionalResponse *RegistrationResponse `protobuf:"bytes,3,opt,name=bidirectional_response,json=bidirectionalResponse" json:"bidirectional_response,omitempty"`
	XXX_NoUnkeyedLiteral  struct{}              `json:"-"`
	XXX_unrecognized      []byte                `json:"-"`
	XXX_sizecache         int32                 `json:"-"`
}

func (m *DnsResponse) Reset()         { *m = DnsResponse{} }
func (m *DnsResponse) String() string { return proto.CompactTextString(m) }
func (*DnsResponse) ProtoMessage()    {}
func (*DnsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_39f66308029891ad, []int{22}
}

func (m *DnsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DnsResponse.Unmarshal(m, b)
}
func (m *DnsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DnsResponse.Marshal(b, m, deterministic)
}
func (m *DnsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DnsResponse.Merge(m, src)
}
func (m *DnsResponse) XXX_Size() int {
	return xxx_messageInfo_DnsResponse.Size(m)
}
func (m *DnsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DnsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DnsResponse proto.InternalMessageInfo

func (m *DnsResponse) GetSuccess() bool {
	if m != nil && m.Success != nil {
		return *m.Success
	}
	return false
}

func (m *DnsResponse) GetClientconfOutdated() bool {
	if m != nil && m.ClientconfOutdated != nil {
		return *m.ClientconfOutdated
	}
	return false
}

func (m *DnsResponse) GetBidirectionalResponse() *RegistrationResponse {
	if m != nil {
		return m.BidirectionalResponse
	}
	return nil
}

// response from ampcache
type AmpCacheResponse struct {
	Success               *bool                 `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
	ClientconfOutdated    *bool                 `protobuf:"varint,2,opt,name=clientconf_outdated,json=clientconfOutdated" json:"clientconf_outdated,omitempty"`
	BidirectionalResponse *RegistrationResponse `protobuf:"bytes,3,opt,name=bidirectional_response,json=bidirectionalResponse" json:"bidirectional_response,omitempty"`
	XXX_NoUnkeyedLiteral  struct{}              `json:"-"`
	XXX_unrecognized      []byte                `json:"-"`
	XXX_sizecache         int32                 `json:"-"`
}

func (m *AmpCacheResponse) Reset()         { *m = AmpCacheResponse{} }
func (m *AmpCacheResponse) String() string { return proto.CompactTextString(m) }
func (*AmpCacheResponse) ProtoMessage()    {}
func (*AmpCacheResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_39f66308029891ad, []int{23}
}

func (m *AmpCacheResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AmpCacheResponse.Unmarshal(m, b)
}
func (m *AmpCacheResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AmpCacheResponse.Marshal(b, m, deterministic)
}
func (m *AmpCacheResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AmpCacheResponse.Merge(m, src)
}
func (m *AmpCacheResponse) XXX_Size() int {
	return xxx_messageInfo_AmpCacheResponse.Size(m)
}
func (m *AmpCacheResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AmpCacheResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AmpCacheResponse proto.InternalMessageInfo

func (m *AmpCacheResponse) GetSuccess() bool {
	if m != nil && m.Success != nil {
		return *m.Success
	}
	return false
}

func (m *AmpCacheResponse) GetClientconfOutdated() bool {
	if m != nil && m.ClientconfOutdated != nil {
		return *m.ClientconfOutdated
	}
	return false
}

func (m *AmpCacheResponse) GetBidirectionalResponse() *RegistrationResponse {
	if m != nil {
		return m.BidirectionalResponse
	}
	return nil
}

func init() {
	proto.RegisterEnum("proto.KeyType", KeyType_name, KeyType_value)
	proto.RegisterEnum("proto.DnsRegMethod", DnsRegMethod_name, DnsRegMethod_value)
	proto.RegisterEnum("proto.C2S_Transition", C2S_Transition_name, C2S_Transition_value)
	proto.RegisterEnum("proto.S2C_Transition", S2C_Transition_name, S2C_Transition_value)
	proto.RegisterEnum("proto.ErrorReasonS2C", ErrorReasonS2C_name, ErrorReasonS2C_value)
	proto.RegisterEnum("proto.TransportType", TransportType_name, TransportType_value)
	proto.RegisterEnum("proto.RegistrationSource", RegistrationSource_name, RegistrationSource_value)
	proto.RegisterEnum("proto.StationOperations", StationOperations_name, StationOperations_value)
	proto.RegisterEnum("proto.IPProto", IPProto_name, IPProto_value)
	proto.RegisterType((*PubKey)(nil), "proto.PubKey")
	proto.RegisterType((*TLSDecoySpec)(nil), "proto.TLSDecoySpec")
	proto.RegisterType((*ClientConf)(nil), "proto.ClientConf")
	proto.RegisterType((*DnsRegConf)(nil), "proto.DnsRegConf")
	proto.RegisterType((*AMPCacheConf)(nil), "proto.AMPCacheConf")
	proto.RegisterType((*DecoyList)(nil), "proto.DecoyList")
	proto.RegisterType((*PhantomSubnetsList)(nil), "proto.PhantomSubnetsList")
	proto.RegisterType((*PhantomSubnets)(nil), "proto.PhantomSubnets")
	proto.RegisterType((*WebRTCICECandidate)(nil), "proto.WebRTCICECandidate")
	proto.RegisterType((*WebRTCSDP)(nil), "proto.WebRTCSDP")
	proto.RegisterType((*WebRTCSignal)(nil), "proto.WebRTCSignal")
	proto.RegisterType((*Addr)(nil), "proto.Addr")
	proto.RegisterType((*DTLSTransportParams)(nil), "proto.DTLSTransportParams")
	proto.RegisterType((*StationToClient)(nil), "proto.StationToClient")
	proto.RegisterType((*RegistrationFlags)(nil), "proto.RegistrationFlags")
	proto.RegisterType((*ClientToStation)(nil), "proto.ClientToStation")
	proto.RegisterType((*PrefixTransportParams)(nil), "proto.PrefixTransportParams")
	proto.RegisterType((*GenericTransportParams)(nil), "proto.GenericTransportParams")
	proto.RegisterType((*C2SWrapper)(nil), "proto.C2SWrapper")
	proto.RegisterType((*SessionStats)(nil), "proto.SessionStats")
	proto.RegisterType((*StationToDetector)(nil), "proto.StationToDetector")
	proto.RegisterType((*RegistrationResponse)(nil), "proto.RegistrationResponse")
	proto.RegisterType((*DnsResponse)(nil), "proto.DnsResponse")
	proto.RegisterType((*AmpCacheResponse)(nil), "proto.AmpCacheResponse")
}

func init() {
	proto.RegisterFile("signalling.proto", fileDescriptor_39f66308029891ad)
}

var fileDescriptor_39f66308029891ad = []byte{
	// 2601 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x58, 0xcd, 0x72, 0xe3, 0xc6,
	0x11, 0x5e, 0x90, 0xfa, 0x21, 0x9b, 0x3f, 0xc2, 0x8e, 0xa4, 0x5d, 0xca, 0x6b, 0xc7, 0x32, 0x6d,
	0x27, 0xb2, 0x9c, 0xd2, 0x66, 0x19, 0x45, 0xb1, 0x2b, 0x55, 0xb6, 0x69, 0x92, 0xb2, 0x19, 0x53,
	0x24, 0x3d, 0x84, 0xbc, 0xb1, 0x73, 0x40, 0x81, 0xc0, 0x90, 0x42, 0x96, 0x04, 0x50, 0x33, 0x80,
	0xd6, 0xcc, 0x21, 0x07, 0x1f, 0xf2, 0x0c, 0x79, 0x84, 0x94, 0xcb, 0x55, 0xa9, 0x1c, 0x72, 0xca,
	0xcd, 0xcf, 0x90, 0x6b, 0xce, 0x79, 0x8c, 0xa4, 0x7a, 0x66, 0x40, 0x82, 0x92, 0xd6, 0xc9, 0x1e,
	0x73, 0x22, 0xe7, 0xeb, 0x9e, 0xe9, 0x9f, 0xe9, 0xbf, 0x01, 0x98, 0xc2, 0x9f, 0x06, 0xce, 0x6c,
	0xe6, 0x07, 0xd3, 0x93, 0x88, 0x87, 0x71, 0x48, 0x36, 0xe5, 0xcf, 0x2b, 0x07, 0xd3, 0x30, 0x9c,
	0xce, 0xd8, 0x63, 0xb9, 0x1a, 0x27, 0x93, 0xc7, 0x4e, 0xb0, 0x50, 0x1c, 0xf5, 0x0f, 0x60, 0x6b,
	0x98, 0x8c, 0x3f, 0x63, 0x0b, 0x62, 0x42, 0xfe, 0x19, 0x5b, 0xd4, 0x8c, 0x43, 0xe3, 0xa8, 0x4c,
	0xf1, 0x2f, 0xa9, 0xc3, 0x46, 0xbc, 0x88, 0x58, 0x2d, 0x77, 0x68, 0x1c, 0x55, 0x1b, 0x55, 0xb5,
	0xe3, 0xe4, 0x33, 0xb6, 0xb0, 0x16, 0x11, 0xa3, 0x92, 0x56, 0xff, 0xbb, 0x01, 0x65, 0xab, 0x37,
	0x6a, 0x33, 0x37, 0x5c, 0x8c, 0x22, 0xe6, 0x92, 0x57, 0xa0, 0x70, 0x15, 0x8a, 0x38, 0x70, 0xe6,
	0x4c, 0x9e, 0x55, 0xa4, 0xcb, 0x35, 0xd2, 0xfc, 0xe8, 0xfa, 0xd4, 0xf1, 0x3c, 0x2e, 0x0f, 0xdd,
	0xa6, 0xcb, 0xb5, 0xa6, 0x9d, 0x49, 0xda, 0x96, 0xd4, 0x61, 0xb9, 0x26, 0x6f, 0xc3, 0x56, 0x94,
	0x8c, 0x51, 0xbb, 0xfc, 0xa1, 0x71, 0x54, 0x6a, 0x54, 0xb4, 0x2a, 0x4a, 0x73, 0xaa, 0x89, 0xa4,
	0x06, 0xdb, 0xb1, 0x3f, 0x67, 0x61, 0x12, 0xd7, 0x36, 0x0e, 0x8d, 0xa3, 0x0a, 0x4d, 0x97, 0xe4,
	0x01, 0x6c, 0xc5, 0x6e, 0xf4, 0xdc, 0x0f, 0x6a, 0x9b, 0x92, 0xa0, 0x57, 0xf5, 0x3f, 0xe6, 0x01,
	0x5a, 0x33, 0x9f, 0x05, 0x71, 0x2b, 0x0c, 0x26, 0xe4, 0x31, 0x80, 0x87, 0x86, 0xd8, 0x33, 0x5f,
	0xc4, 0x52, 0xfb, 0x52, 0xc3, 0xd4, 0xb2, 0xa4, 0x85, 0x3d, 0x5f, 0xc4, 0xb4, 0xe8, 0xa5, 0x7f,
	0xc9, 0x8f, 0x00, 0xa6, 0x2c, 0x60, 0xdc, 0x89, 0xfd, 0x30, 0x90, 0x26, 0x55, 0x68, 0x06, 0x21,
	0xa7, 0x50, 0xf5, 0xd8, 0xc4, 0x49, 0x66, 0xb1, 0xfd, 0x43, 0x06, 0x54, 0x34, 0xd3, 0x50, 0xd9,
	0xf1, 0x19, 0xec, 0x45, 0x57, 0x4e, 0x10, 0x87, 0x73, 0x5b, 0x24, 0xe3, 0x80, 0xc5, 0x42, 0x29,
	0xb4, 0x21, 0xf7, 0x1e, 0xa4, 0x7b, 0x15, 0xcb, 0x48, 0x71, 0x48, 0xcd, 0x48, 0x74, 0x0b, 0x43,
	0x15, 0xdc, 0x30, 0xf8, 0x5d, 0xc2, 0x59, 0xaa, 0xc2, 0xe6, 0x9d, 0x2a, 0x68, 0x26, 0xad, 0xc2,
	0xcf, 0xa1, 0xec, 0x05, 0xc2, 0xe6, 0x6c, 0x6a, 0xbb, 0x61, 0x30, 0x91, 0x37, 0x52, 0x6a, 0xdc,
	0x4f, 0x7d, 0x11, 0x08, 0xca, 0xa6, 0xe8, 0x32, 0x0a, 0xde, 0xf2, 0x3f, 0x79, 0x1f, 0xaa, 0xce,
	0x3c, 0xb2, 0x5d, 0xc7, 0xbd, 0x62, 0x6a, 0xdb, 0xb6, 0xdc, 0xb6, 0xab, 0xb7, 0x35, 0x2f, 0x86,
	0x2d, 0xa4, 0xc9, 0x8d, 0x65, 0x67, 0x1e, 0x2d, 0x57, 0xf5, 0x7f, 0x1a, 0x00, 0xed, 0xb5, 0x93,
	0x52, 0xf1, 0x73, 0x16, 0x5f, 0x85, 0x5e, 0xcd, 0x38, 0xcc, 0x1d, 0x55, 0x97, 0x27, 0x29, 0xd6,
	0x0b, 0x49, 0xa2, 0x65, 0x2f, 0xb3, 0x92, 0x57, 0xed, 0xf0, 0x29, 0x8b, 0xe5, 0x75, 0x14, 0xa9,
	0x5e, 0x21, 0xee, 0x85, 0x73, 0xc7, 0x0f, 0x6a, 0xf9, 0xc3, 0x1c, 0xe2, 0x6a, 0x85, 0xb8, 0xf6,
	0xcb, 0x86, 0x8c, 0xba, 0x34, 0x98, 0xde, 0x85, 0xfb, 0x49, 0x3c, 0x13, 0xb6, 0xe7, 0x8b, 0x98,
	0xfb, 0xe3, 0x44, 0xde, 0xf0, 0xa6, 0x3c, 0xd2, 0x44, 0x42, 0x3b, 0x83, 0x93, 0xd7, 0xa1, 0x24,
	0xe2, 0x24, 0xb0, 0x05, 0xe3, 0xd7, 0x4c, 0xc5, 0x6f, 0x91, 0x02, 0x42, 0x23, 0x89, 0xd4, 0xff,
	0x00, 0xe5, 0xac, 0xf5, 0xe4, 0x10, 0x4a, 0xce, 0x3c, 0x92, 0x9e, 0x4a, 0xf8, 0x4c, 0x5a, 0x57,
	0xa4, 0x59, 0xe8, 0x6e, 0xf9, 0xb9, 0xff, 0x4d, 0xbe, 0xb2, 0x30, 0x2b, 0xff, 0x43, 0x28, 0x2e,
	0x03, 0x98, 0x34, 0x00, 0xe4, 0xc9, 0x08, 0x88, 0x9a, 0x71, 0x98, 0xcf, 0xdc, 0x51, 0x36, 0x97,
	0x69, 0x11, 0xe5, 0x48, 0xae, 0xfa, 0x17, 0x40, 0x6e, 0x07, 0x1c, 0xf9, 0x08, 0xcc, 0xe7, 0xcc,
	0x9f, 0x5e, 0xc5, 0xcc, 0x4b, 0x43, 0x55, 0x9f, 0xb7, 0x7f, 0x67, 0x94, 0xd2, 0x9d, 0x94, 0x5d,
	0x03, 0xf5, 0x08, 0xaa, 0xeb, 0x2c, 0x78, 0x21, 0x8a, 0x49, 0x26, 0x60, 0x85, 0xea, 0x15, 0x66,
	0x77, 0x2a, 0x22, 0x77, 0x98, 0x3f, 0x2a, 0xd2, 0x74, 0x49, 0x7e, 0x0a, 0x84, 0x3b, 0x81, 0x17,
	0xce, 0xfd, 0xdf, 0x33, 0xdb, 0x13, 0xb1, 0x1d, 0x85, 0x3c, 0x96, 0x99, 0x56, 0xa0, 0xe6, 0x92,
	0xd2, 0x16, 0xf1, 0x30, 0xe4, 0x71, 0x3d, 0x04, 0xf2, 0x94, 0x8d, 0xa9, 0xd5, 0xea, 0xb6, 0x3a,
	0x2d, 0x27, 0xf0, 0x7c, 0xcf, 0x89, 0x19, 0x39, 0xc0, 0xf2, 0x63, 0x27, 0x51, 0xc4, 0xb8, 0xbc,
	0x8d, 0x0d, 0xba, 0xed, 0x47, 0x97, 0xb8, 0xd4, 0xa4, 0x59, 0xf8, 0x9c, 0x61, 0xd5, 0xd2, 0xa4,
	0x1e, 0x2e, 0xc9, 0x9b, 0x50, 0x71, 0xc3, 0x79, 0x14, 0x0a, 0xe6, 0xd9, 0x7e, 0x30, 0x09, 0xa5,
	0xe7, 0x2b, 0xb4, 0x9c, 0x82, 0xdd, 0x60, 0x12, 0xd6, 0xbf, 0x82, 0xa2, 0x12, 0x38, 0x6a, 0x0f,
	0x09, 0xd1, 0x35, 0xd5, 0x90, 0x8c, 0xf2, 0x3f, 0x79, 0x1f, 0xc0, 0x4d, 0x15, 0x51, 0xc6, 0xad,
	0xb2, 0xfc, 0xb6, 0xaa, 0x34, 0xc3, 0x5c, 0x3f, 0x87, 0xb2, 0x3e, 0x5b, 0x96, 0x7e, 0x3c, 0x5e,
	0x30, 0xe6, 0xe9, 0x80, 0x92, 0xff, 0x49, 0x1d, 0xf2, 0xc2, 0x8b, 0xa4, 0xea, 0xab, 0x72, 0xb6,
	0xd4, 0x88, 0x22, 0xb1, 0x7e, 0x0c, 0x1b, 0x4d, 0xac, 0xb4, 0x55, 0xc8, 0x75, 0x87, 0xba, 0x07,
	0xe4, 0xba, 0x52, 0x5d, 0x74, 0x9a, 0x2e, 0x6d, 0xf2, 0x7f, 0xfd, 0x6f, 0x06, 0xec, 0xb6, 0xad,
	0xde, 0xc8, 0xe2, 0x4e, 0x20, 0xd0, 0xd5, 0x43, 0x87, 0x3b, 0x73, 0x41, 0x8e, 0xa0, 0x28, 0xb8,
	0x6b, 0x63, 0xc5, 0x3e, 0xd5, 0xc5, 0xb3, 0x94, 0x66, 0xbe, 0xe7, 0x71, 0x5a, 0x10, 0xdc, 0xc5,
	0x3f, 0xa7, 0x59, 0xce, 0x33, 0x79, 0xf4, 0x0b, 0x38, 0xcf, 0x5e, 0xee, 0x6a, 0xc9, 0xab, 0x50,
	0x4c, 0x82, 0x90, 0x7b, 0x8c, 0x33, 0x4f, 0xa6, 0x73, 0x81, 0xae, 0x80, 0xfa, 0xf7, 0x39, 0xd8,
	0x19, 0xc5, 0xb2, 0x30, 0x5b, 0xa1, 0xaa, 0xfa, 0xe4, 0x1d, 0x30, 0xa5, 0x5c, 0x37, 0x9c, 0xd9,
	0xd7, 0x8c, 0x0b, 0x4c, 0x32, 0x15, 0x76, 0x3b, 0x29, 0xfe, 0x85, 0x82, 0x31, 0xd6, 0x45, 0xec,
	0xc4, 0xcc, 0x8e, 0xd1, 0x6e, 0x7f, 0x99, 0x8f, 0xd5, 0x65, 0xac, 0x8f, 0x1a, 0x2d, 0xdb, 0x5a,
	0x12, 0xe9, 0x8e, 0x64, 0x5f, 0x01, 0xa4, 0x01, 0x25, 0xac, 0x8a, 0xfe, 0x34, 0x8d, 0x95, 0x6c,
	0x4d, 0x5d, 0xb5, 0x21, 0x0a, 0x8a, 0x0b, 0x83, 0x87, 0x9c, 0x02, 0x30, 0xce, 0x6d, 0xce, 0x1c,
	0x11, 0x06, 0xd2, 0xa6, 0x95, 0xbc, 0x0e, 0xe7, 0x21, 0xa7, 0x92, 0x32, 0x6a, 0xb4, 0x68, 0x91,
	0x71, 0xbd, 0xc2, 0x7a, 0x10, 0xcf, 0x23, 0x7b, 0xec, 0xb8, 0xcf, 0xc2, 0xc9, 0x44, 0x37, 0x3d,
	0x88, 0xe7, 0xd1, 0xc7, 0x0a, 0x21, 0xaf, 0x01, 0x08, 0xe5, 0x0a, 0xdb, 0xf7, 0x74, 0xbd, 0x2a,
	0x6a, 0xa4, 0xeb, 0x61, 0xae, 0x45, 0x8e, 0xe7, 0xf9, 0xc1, 0xb4, 0xe6, 0xc9, 0x58, 0x48, 0x97,
	0xf5, 0xbf, 0x18, 0x70, 0x9f, 0xb2, 0x29, 0x16, 0x1f, 0xc9, 0x7c, 0x3e, 0x73, 0xa6, 0x02, 0xe5,
	0x25, 0xd1, 0x2c, 0x74, 0x3c, 0x3b, 0x0c, 0x66, 0x6a, 0x86, 0x28, 0x50, 0x50, 0xd0, 0x20, 0x98,
	0x2d, 0x50, 0x9e, 0xe7, 0xf0, 0x67, 0xaa, 0xe6, 0x48, 0xb7, 0x15, 0x68, 0x11, 0x11, 0x59, 0x5e,
	0xc8, 0x1b, 0x50, 0x8e, 0x78, 0xf8, 0xf5, 0xc2, 0xbe, 0x62, 0x8e, 0x27, 0x0b, 0x18, 0x32, 0x94,
	0x24, 0xf6, 0xa9, 0x84, 0xc8, 0x43, 0xd8, 0x4e, 0x04, 0xb3, 0xad, 0x6e, 0x4f, 0xdf, 0xec, 0x56,
	0x22, 0x98, 0xd5, 0xed, 0x61, 0x0f, 0x8e, 0x38, 0x13, 0xae, 0x13, 0x04, 0xcc, 0x93, 0xa6, 0x16,
	0x68, 0x06, 0xa9, 0xff, 0x79, 0x0b, 0x76, 0x94, 0x73, 0xad, 0x50, 0x5f, 0xff, 0xcb, 0x5c, 0x7b,
	0x03, 0xf6, 0x57, 0x33, 0x81, 0x7d, 0xab, 0xdb, 0xef, 0x2e, 0x87, 0x81, 0x4f, 0x56, 0x6d, 0xff,
	0xae, 0x50, 0xc9, 0xaf, 0x5d, 0x5d, 0xab, 0x31, 0xfa, 0xc1, 0x50, 0x59, 0x39, 0x54, 0x2c, 0x02,
	0x57, 0x5a, 0xbc, 0x91, 0x3a, 0x74, 0xb4, 0x08, 0x5c, 0x4c, 0x0c, 0x57, 0x1a, 0x65, 0xcf, 0xfc,
	0xf1, 0xd2, 0x06, 0x75, 0xd1, 0xa6, 0xa2, 0xf4, 0xfc, 0x71, 0x6a, 0xc4, 0x07, 0xf0, 0xc8, 0xf3,
	0x85, 0x33, 0x9e, 0x31, 0xec, 0xa9, 0xf2, 0xf2, 0xb8, 0x1d, 0x5e, 0x33, 0xce, 0x7d, 0x8f, 0x09,
	0x79, 0xff, 0x05, 0x7a, 0xa0, 0x59, 0xd2, 0xeb, 0xe5, 0x83, 0x94, 0x01, 0xeb, 0xdc, 0xc4, 0xf1,
	0x67, 0xcc, 0x4b, 0x9b, 0x06, 0xc8, 0x0a, 0x5c, 0x56, 0xa0, 0x6a, 0x11, 0xe4, 0x1d, 0xd8, 0x44,
	0x33, 0x44, 0xad, 0xb4, 0xd6, 0xf5, 0x47, 0x4c, 0xa0, 0x0e, 0xe8, 0x7a, 0x41, 0x15, 0x07, 0x69,
	0x40, 0x31, 0x4e, 0xab, 0x47, 0xad, 0x2c, 0x3d, 0xb3, 0x97, 0x36, 0xa0, 0x14, 0x97, 0x43, 0xe6,
	0x8a, 0x8d, 0x7c, 0x08, 0xe6, 0x72, 0x61, 0x47, 0xb2, 0xe4, 0xd4, 0x2a, 0x52, 0xd2, 0xde, 0x89,
	0x9a, 0x6f, 0x4f, 0xd2, 0xf9, 0xf6, 0xa4, 0x19, 0x2c, 0xe8, 0x4e, 0x7c, 0xa3, 0x3e, 0xbd, 0x8d,
	0x93, 0xd0, 0x35, 0xe3, 0xb1, 0x2c, 0x3c, 0x4c, 0x88, 0xda, 0x9e, 0x8c, 0xfb, 0x8a, 0x42, 0x9b,
	0x0a, 0x24, 0xbf, 0x84, 0xda, 0xdc, 0x11, 0xcf, 0x52, 0x5b, 0x75, 0x4f, 0xb5, 0xe5, 0x40, 0xbb,
	0x2f, 0x37, 0xec, 0x2b, 0xba, 0xea, 0x93, 0x92, 0xda, 0xc7, 0xe9, 0xf6, 0x35, 0x80, 0xeb, 0x33,
	0x5b, 0x24, 0x91, 0xb4, 0xea, 0x81, 0x8a, 0xf1, 0xeb, 0xb3, 0x91, 0x02, 0x24, 0xf9, 0x74, 0x49,
	0x7e, 0xa8, 0xc9, 0xa7, 0x29, 0xf9, 0x04, 0x36, 0x27, 0x98, 0x4b, 0xb5, 0x9a, 0xb4, 0xa9, 0xa6,
	0xdd, 0x71, 0x2b, 0xd7, 0xa8, 0x62, 0x23, 0xef, 0x41, 0xe5, 0x39, 0x1b, 0xf3, 0xd8, 0xb5, 0xd5,
	0xd4, 0x5f, 0x7b, 0x7d, 0xcd, 0xeb, 0xd9, 0xae, 0x40, 0xcb, 0x8a, 0x53, 0xf7, 0x88, 0x17, 0x27,
	0xf7, 0xb7, 0x06, 0xec, 0x0f, 0x39, 0x9b, 0xf8, 0x5f, 0xdf, 0xac, 0xed, 0x8f, 0xa0, 0x18, 0x49,
	0x02, 0x96, 0x0b, 0xcc, 0x94, 0x4d, 0x5a, 0x50, 0x40, 0x57, 0x8e, 0x5c, 0xea, 0xbf, 0xcc, 0x09,
	0x1c, 0xa1, 0xe4, 0x8a, 0x9c, 0xc0, 0xae, 0x9b, 0x08, 0x1c, 0x63, 0x27, 0xb3, 0x44, 0x5c, 0xd9,
	0x51, 0x38, 0xf3, 0x5d, 0x35, 0x02, 0x6f, 0xd2, 0xfb, 0x8a, 0x74, 0x8e, 0x94, 0xa1, 0x24, 0xbc,
	0xa0, 0xd8, 0x57, 0x5e, 0xd0, 0xc7, 0xcf, 0xe1, 0x81, 0x4c, 0x39, 0xdf, 0xbd, 0xa9, 0xec, 0xcb,
	0x9d, 0xf3, 0x3d, 0xbe, 0x01, 0x1a, 0xa3, 0xa7, 0xdc, 0x91, 0xdd, 0xfe, 0x4d, 0xa8, 0x88, 0x2b,
	0x87, 0xe3, 0x40, 0xc3, 0x5c, 0xce, 0x62, 0xdd, 0x0c, 0xcb, 0x0a, 0x1c, 0x49, 0x8c, 0x74, 0x61,
	0x8f, 0x67, 0x2e, 0xc6, 0x8e, 0x9c, 0x05, 0x66, 0xa6, 0x2e, 0xe9, 0x0f, 0xd6, 0x4a, 0xfa, 0xb2,
	0xea, 0xd0, 0xdd, 0xec, 0x9e, 0xa1, 0xda, 0x42, 0x7e, 0x0d, 0x6b, 0xb0, 0x2d, 0xc2, 0x84, 0xbb,
	0x4c, 0x57, 0xfa, 0x83, 0x3b, 0xa2, 0x60, 0x24, 0x19, 0x28, 0xe1, 0xb7, 0x30, 0xf2, 0xe4, 0x86,
	0x5a, 0x69, 0x9c, 0xab, 0xf7, 0xd4, 0x9a, 0x9c, 0x34, 0xda, 0xdf, 0x84, 0x8a, 0x0a, 0xf3, 0x94,
	0x77, 0x5b, 0x99, 0x2b, 0xc1, 0x94, 0x69, 0x08, 0xfb, 0x6b, 0xe7, 0x72, 0x26, 0xa2, 0x30, 0x10,
	0xac, 0x56, 0x90, 0xf6, 0x3e, 0xba, 0x43, 0x4b, 0xaa, 0x59, 0xe8, 0x9a, 0x46, 0x29, 0x4a, 0xea,
	0x50, 0xa6, 0x6c, 0x8a, 0xcb, 0x8f, 0x17, 0x38, 0xf4, 0x14, 0x95, 0xd4, 0x2c, 0x46, 0x8e, 0xc1,
	0xd4, 0x6b, 0x19, 0xb8, 0x71, 0xc2, 0x59, 0x0d, 0x24, 0xdf, 0x2d, 0x1c, 0xdf, 0x0f, 0xe5, 0x6c,
	0xa1, 0x21, 0x3f, 0x83, 0xbd, 0xb5, 0x8a, 0x65, 0x3b, 0xf3, 0x30, 0x09, 0x62, 0x99, 0xf2, 0x15,
	0x4a, 0xb2, 0x85, 0xab, 0x29, 0x29, 0xe4, 0x09, 0xec, 0xc7, 0x61, 0xec, 0xcc, 0x6c, 0x7c, 0x34,
	0xda, 0x71, 0x88, 0x2f, 0x98, 0x80, 0xb9, 0xb1, 0x4c, 0xac, 0x0a, 0x25, 0x92, 0x68, 0xf9, 0x73,
	0x66, 0x85, 0x2d, 0x45, 0x21, 0x6f, 0x41, 0x95, 0xc7, 0x31, 0xf2, 0xea, 0xd6, 0x59, 0x7b, 0x43,
	0xf2, 0x96, 0x79, 0x9c, 0x69, 0x36, 0x87, 0x50, 0xc6, 0x71, 0x3b, 0x0e, 0x75, 0xf7, 0xfb, 0xb1,
	0xee, 0xc6, 0x33, 0x61, 0x85, 0xaa, 0xfd, 0x21, 0x87, 0x1b, 0xad, 0x38, 0x7e, 0xa2, 0x39, 0xdc,
	0x48, 0x73, 0xd4, 0xbf, 0xc9, 0xc1, 0xfd, 0xe5, 0xec, 0xd2, 0x66, 0x31, 0x73, 0xe3, 0x90, 0x63,
	0x49, 0x49, 0x1f, 0x8a, 0x7e, 0xa4, 0x5f, 0xdb, 0x45, 0x8d, 0x74, 0x23, 0x4c, 0x5a, 0xdd, 0x23,
	0xfc, 0x48, 0x3f, 0x1d, 0x0a, 0x0a, 0xe8, 0x46, 0xb8, 0x57, 0xbf, 0x8e, 0xed, 0x40, 0xc8, 0xc0,
	0xdd, 0xa0, 0x45, 0x8d, 0xf4, 0x05, 0x39, 0x83, 0x62, 0x18, 0xa5, 0xad, 0x4e, 0x05, 0x63, 0x5a,
	0x92, 0xb4, 0x1e, 0x83, 0x94, 0x2c, 0xe8, 0x8a, 0x15, 0x87, 0xe5, 0x65, 0xc6, 0x81, 0x7a, 0x84,
	0x7b, 0x7a, 0x3a, 0x3b, 0x00, 0x9c, 0xeb, 0x14, 0xa9, 0xa4, 0x48, 0x82, 0xbb, 0x92, 0xf4, 0x16,
	0xa8, 0x2f, 0x15, 0xba, 0x17, 0xa4, 0x9f, 0x1a, 0xba, 0xc3, 0x21, 0xfe, 0x52, 0x45, 0xac, 0xff,
	0x23, 0x07, 0x7b, 0x77, 0xc5, 0xd8, 0xda, 0x77, 0x05, 0xe3, 0x07, 0xbe, 0x2b, 0xe4, 0x6e, 0x7c,
	0x57, 0xc8, 0x2a, 0x9b, 0x5f, 0x57, 0xb6, 0x0e, 0x65, 0x55, 0xf8, 0xa9, 0xac, 0x17, 0xfa, 0x71,
	0xb8, 0x86, 0x91, 0x3d, 0xd8, 0x64, 0x38, 0x82, 0xe9, 0x67, 0xa1, 0x5a, 0x90, 0x27, 0x00, 0xee,
	0x72, 0x96, 0xbb, 0xf1, 0x70, 0x5e, 0x1b, 0xf2, 0x56, 0xdf, 0x1d, 0xee, 0x6a, 0x6d, 0xf0, 0x32,
	0xad, 0xed, 0x57, 0xf0, 0x8a, 0xbe, 0x76, 0x91, 0x76, 0x18, 0x69, 0x95, 0x8d, 0xd5, 0x4e, 0x3a,
	0xbb, 0x40, 0x1f, 0xa6, 0x1c, 0xba, 0xe3, 0xa0, 0x99, 0x68, 0x48, 0xfd, 0x3b, 0x03, 0x4a, 0xf2,
	0x41, 0xad, 0xbd, 0x29, 0x1f, 0x5a, 0xae, 0x8b, 0xc5, 0x40, 0x0d, 0x72, 0xe9, 0x92, 0x3c, 0x86,
	0x5d, 0xa5, 0x35, 0x0e, 0xa8, 0x76, 0x98, 0xc4, 0xf8, 0x08, 0xf1, 0xf4, 0x38, 0x47, 0x56, 0xa4,
	0x81, 0xa6, 0x10, 0x0a, 0x0f, 0xc6, 0xbe, 0xe7, 0x73, 0xe6, 0xe2, 0x7d, 0x39, 0xb3, 0x55, 0xe5,
	0xc8, 0xff, 0xf7, 0xca, 0xb1, 0xbf, 0xb6, 0x35, 0x85, 0xeb, 0x7f, 0x35, 0xc0, 0x6c, 0xea, 0x6f,
	0x07, 0xff, 0x27, 0x3a, 0x1f, 0xbf, 0x0b, 0xdb, 0xfa, 0xb3, 0x19, 0xd9, 0x81, 0x52, 0xb3, 0x33,
	0xb2, 0x3f, 0x69, 0x5d, 0xd8, 0x4f, 0x1a, 0xef, 0x99, 0x5f, 0x65, 0x81, 0xc6, 0x2f, 0xce, 0xcc,
	0xdf, 0x1e, 0xbf, 0x03, 0xe5, 0xec, 0xf7, 0x0d, 0xb2, 0x0d, 0xf9, 0xcb, 0xf6, 0xd0, 0x34, 0xf0,
	0x4f, 0x7b, 0x60, 0x99, 0x39, 0xf5, 0xe7, 0x53, 0x33, 0x7f, 0xfc, 0x2f, 0x03, 0xaa, 0xeb, 0xa3,
	0x24, 0xb9, 0x0f, 0x15, 0x44, 0xfa, 0x03, 0xbb, 0xf5, 0x69, 0xb3, 0xff, 0x49, 0xc7, 0xbc, 0x47,
	0xf6, 0xc0, 0x44, 0x68, 0xd4, 0x19, 0x8d, 0xba, 0x83, 0xbe, 0xdd, 0xed, 0x77, 0x2d, 0xd3, 0x20,
	0x8f, 0xe0, 0x61, 0x16, 0x6d, 0x0d, 0xbe, 0xe8, 0x50, 0x4b, 0x11, 0x4b, 0xa4, 0x06, 0x7b, 0x48,
	0xec, 0xfc, 0x66, 0xd8, 0x69, 0x59, 0x36, 0xed, 0xb4, 0x06, 0xfd, 0x7e, 0xa7, 0x85, 0xb2, 0xf7,
	0xe1, 0xfe, 0xda, 0xb6, 0xde, 0x60, 0xd4, 0x31, 0xf3, 0xa9, 0x8c, 0x2f, 0xbb, 0x9d, 0x5e, 0xdb,
	0xbe, 0x1c, 0xf6, 0x06, 0xcd, 0xb6, 0xb9, 0x41, 0x1e, 0x00, 0x41, 0xb4, 0xd9, 0xfa, 0xfc, 0xb2,
	0x4b, 0x3b, 0x29, 0xbe, 0x49, 0x0e, 0xe1, 0xd5, 0xcc, 0xf1, 0x0a, 0x1e, 0xf4, 0x7b, 0x5f, 0x6a,
	0x49, 0xe6, 0x16, 0xa9, 0x42, 0x51, 0x72, 0x50, 0x3a, 0xa0, 0xe6, 0xbf, 0x8d, 0xe3, 0x3f, 0x19,
	0x50, 0x5d, 0x7f, 0x5f, 0xa1, 0xa5, 0x88, 0xdc, 0xb0, 0x14, 0xa1, 0xdb, 0x96, 0x66, 0xd1, 0x75,
	0x4b, 0x0f, 0x60, 0x1f, 0x89, 0xad, 0x41, 0xff, 0xbc, 0x4b, 0x2f, 0x6e, 0x9a, 0xba, 0xb6, 0x4f,
	0x9b, 0x5a, 0x85, 0x22, 0xc2, 0x4b, 0xd5, 0xbe, 0x33, 0xa0, 0xba, 0xfe, 0x14, 0x23, 0x65, 0x28,
	0xf4, 0x07, 0x9a, 0xe3, 0x9e, 0xbc, 0x12, 0x25, 0x73, 0x64, 0xd1, 0x4e, 0xf3, 0xc2, 0x34, 0xc8,
	0x2e, 0xec, 0xb4, 0x7a, 0xdd, 0x4e, 0x1f, 0x7d, 0x3b, 0x1c, 0x50, 0xab, 0xd3, 0x36, 0x73, 0x19,
	0x70, 0x48, 0x07, 0xd6, 0xa0, 0x35, 0xe8, 0x29, 0xc7, 0x8e, 0xac, 0xa6, 0xa5, 0xcc, 0xb1, 0x3a,
	0xb4, 0xdf, 0xec, 0x99, 0x1b, 0x84, 0x40, 0xb5, 0xdd, 0x69, 0x0d, 0xbe, 0xb4, 0xf1, 0x5c, 0xed,
	0x54, 0x14, 0xa3, 0xb6, 0x6b, 0x31, 0x1e, 0xb2, 0x69, 0xc8, 0xea, 0x5e, 0x74, 0x06, 0x97, 0x96,
	0xc9, 0x8e, 0xbf, 0x31, 0xa0, 0xb2, 0x36, 0x64, 0x93, 0x02, 0x6c, 0xf4, 0x93, 0xd9, 0xcc, 0xbc,
	0x87, 0x81, 0x75, 0xe1, 0x07, 0xa6, 0x41, 0x8a, 0xb0, 0x39, 0x18, 0x4f, 0xc4, 0xa9, 0x99, 0x43,
	0x2a, 0xbe, 0xf6, 0xcd, 0x3c, 0x01, 0xd8, 0x52, 0xd3, 0xa1, 0xb9, 0x81, 0x68, 0x82, 0xe8, 0x26,
	0xa2, 0xe7, 0x21, 0x9f, 0x3b, 0xb1, 0xb9, 0x85, 0xe8, 0xd3, 0xe6, 0xe8, 0xc2, 0xdc, 0xc6, 0x93,
	0xce, 0xad, 0x8e, 0x59, 0x40, 0xe8, 0xf3, 0xc4, 0x77, 0xcd, 0x22, 0x32, 0x3e, 0x95, 0x73, 0xa8,
	0xe9, 0x1e, 0x7f, 0x6b, 0x00, 0xb9, 0x3d, 0xd4, 0x60, 0x2e, 0x5c, 0x06, 0x22, 0x62, 0xae, 0x3f,
	0xf1, 0x99, 0x67, 0xde, 0x43, 0x47, 0xa6, 0xdd, 0x4e, 0x25, 0x40, 0x73, 0xd8, 0x55, 0x9e, 0x4a,
	0xe1, 0xa1, 0x7a, 0xe9, 0x29, 0x4f, 0x7d, 0x9c, 0xcd, 0x3e, 0x64, 0xdd, 0x90, 0xb9, 0xd2, 0x47,
	0x3d, 0x6f, 0x92, 0x11, 0xdd, 0x42, 0x01, 0xe9, 0x87, 0x39, 0x73, 0xfb, 0xf6, 0x11, 0x17, 0x43,
	0xb3, 0x70, 0xfc, 0xd1, 0xb2, 0xf7, 0xae, 0x7a, 0x1e, 0x29, 0xc1, 0xf6, 0x65, 0xf0, 0x2c, 0x08,
	0x9f, 0x07, 0xca, 0x6f, 0x7d, 0xf6, 0xdc, 0x34, 0xd0, 0xc6, 0xcb, 0x08, 0xeb, 0x88, 0x99, 0x43,
	0x1f, 0xb6, 0x66, 0xcc, 0xe1, 0x66, 0xfe, 0xf8, 0x2d, 0xd8, 0xd6, 0xbd, 0x4c, 0x66, 0x73, 0xf0,
	0x4c, 0xed, 0xb1, 0xdc, 0x48, 0x59, 0x75, 0xe9, 0x45, 0x66, 0xee, 0x3f, 0x01, 0x00, 0x00, 0xff,
	0xff, 0xdb, 0x9b, 0xec, 0x63, 0xc0, 0x17, 0x00, 0x00,
}
